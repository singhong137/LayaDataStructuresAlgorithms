{
  "code": "import { TreeNode } from \"./data_models/Node\";\r\nimport { defaultCompare, Compare } from \"../util\";\r\nexport class BinarySearchTree {\r\n    constructor(compareFn = defaultCompare) {\r\n        this.compareFn = compareFn;\r\n    }\r\n    insert(key) {\r\n        if (this.root == null) {\r\n            this.root = new TreeNode(key);\r\n        }\r\n        else {\r\n            this.insertNode(this.root, key);\r\n        }\r\n    }\r\n    insertNode(node, key) {\r\n        if (this.compareFn(key, node.key) === Compare.LESS_THAN) {\r\n            if (node.left == null) {\r\n                node.left = new TreeNode(key);\r\n            }\r\n            else {\r\n                this.insertNode(node.left, key);\r\n            }\r\n        }\r\n        else if (node.right == null) {\r\n            node.right = new TreeNode(key);\r\n        }\r\n        else {\r\n            this.insertNode(node.right, key);\r\n        }\r\n    }\r\n    getRoot() {\r\n        return this.root;\r\n    }\r\n    search(key) {\r\n        return this.searchNode(this.root, key);\r\n    }\r\n    searchNode(node, key) {\r\n        if (node == null)\r\n            return false;\r\n        if (this.compareFn(key, node.key) === Compare.LESS_THAN) {\r\n            return this.searchNode(node.left, key);\r\n        }\r\n        else if (this.compareFn(key, node.key) === Compare.BIGGER_THAN) {\r\n            return this.searchNode(node.right, key);\r\n        }\r\n        return true;\r\n    }\r\n    inOrderTraverse(callback) {\r\n        this.inOrderTraverseNode(this.root, callback);\r\n    }\r\n    inOrderTraverseNode(node, callback) {\r\n        if (node != null) {\r\n            this.inOrderTraverseNode(node.left, callback);\r\n            callback(node.key);\r\n            this.inOrderTraverseNode(node.right, callback);\r\n        }\r\n    }\r\n    preOrderTraverse(callback) {\r\n        this.preOrderTraverseNode(this.root, callback);\r\n    }\r\n    preOrderTraverseNode(node, callback) {\r\n        if (node != null) {\r\n            callback(node.key);\r\n            this.preOrderTraverseNode(node.left, callback);\r\n            this.preOrderTraverseNode(node.right, callback);\r\n        }\r\n    }\r\n    postOrderTraverse(callback) {\r\n        this.postOrderTraverseNode(this.root, callback);\r\n    }\r\n    postOrderTraverseNode(node, callback) {\r\n        if (node != null) {\r\n            this.postOrderTraverseNode(node.left, callback);\r\n            this.postOrderTraverseNode(node.right, callback);\r\n            callback(node.key);\r\n        }\r\n    }\r\n    min() {\r\n        return this.minNode(this.root);\r\n    }\r\n    minNode(node) {\r\n        let current = node;\r\n        while (current != null && current.left != null)\r\n            current = current.left;\r\n        return current;\r\n    }\r\n    max() {\r\n        return this.maxNode(this.root);\r\n    }\r\n    maxNode(node) {\r\n        let current = node;\r\n        while (current != null && current.right != null)\r\n            current = current.right;\r\n        return current;\r\n    }\r\n    remove(key) {\r\n        return this.root = this.removeNode(this.root, key);\r\n    }\r\n    removeNode(node, key) {\r\n        if (node == null)\r\n            return null;\r\n        if (this.compareFn(key, node.key) === Compare.LESS_THAN) {\r\n            node.left = this.removeNode(node.left, key);\r\n            return node;\r\n        }\r\n        else if (this.compareFn(key, node.key) === Compare.BIGGER_THAN) {\r\n            node.right = this.removeNode(node.right, key);\r\n            return node;\r\n        }\r\n        else {\r\n            if (node.left == null && node.right == null) {\r\n                node = null;\r\n                return node;\r\n            }\r\n            if (node.left == null) {\r\n                node = node.right;\r\n                return node;\r\n            }\r\n            else if (node.right == null) {\r\n                node = node.left;\r\n                return node;\r\n            }\r\n            const aux = this.minNode(node.right);\r\n            node.key = aux.key;\r\n            node.right = this.removeNode(node.right, aux.key);\r\n            return node;\r\n        }\r\n    }\r\n}\r\n",
  "references": [
    "D:/widgets/LayaDataStructuresAlgorithms/src/data_structures/data_models/Node.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/src/util.ts"
  ]
}
