{
  "code": "import { findMaxValue, findMinValue } from \"../search/min-max-search\";\r\nfunction countingSortForRadix(array, radixBase, significantDigit, minValue) {\r\n    let bucketsIndex;\r\n    const buckets = [];\r\n    const aux = [];\r\n    for (let i = 0; i < radixBase; i++)\r\n        buckets[i] = 0;\r\n    for (let i = 0; i < array.length; i++) {\r\n        bucketsIndex = ((array[i] - minValue) / significantDigit) % radixBase | 0;\r\n        console.log('~~~  ', array[i], minValue, significantDigit, radixBase, bucketsIndex);\r\n        buckets[bucketsIndex]++;\r\n    }\r\n    console.log(buckets);\r\n    for (let i = 1; i < radixBase; i++)\r\n        buckets[i] += buckets[i - 1];\r\n    console.log(buckets);\r\n    for (let i = array.length - 1; i >= 0; i--) {\r\n        bucketsIndex = ((array[i] - minValue) / significantDigit) % radixBase | 0;\r\n        aux[--buckets[bucketsIndex]] = array[i];\r\n        console.log('``` ', array[i], minValue, significantDigit, radixBase, bucketsIndex);\r\n    }\r\n    console.log(buckets);\r\n    for (let i = 0; i < array.length; i++)\r\n        array[i] = aux[i];\r\n    return array;\r\n}\r\nexport function radixSort(array, radixBase = 10) {\r\n    if (array.length < 2)\r\n        return array;\r\n    const [minValue, maxValue] = [findMinValue(array), findMaxValue(array)];\r\n    let significantDigit = 1;\r\n    while ((maxValue - minValue) / significantDigit >= 1) {\r\n        array = countingSortForRadix(array, radixBase, significantDigit, minValue);\r\n        significantDigit *= radixBase;\r\n    }\r\n    return array;\r\n}\r\n//# sourceMappingURL=radix-sort.js.map",
  "references": [
    "D:/widgets/LayaDataStructuresAlgorithms/src/algorithms/search/min-max-search.ts"
  ],
  "map": "{\"version\":3,\"file\":\"radix-sort.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/algorithms/sorting/radix-sort.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,YAAY,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAC;AAEtE,SAAS,oBAAoB,CAAC,KAAe,EAAE,SAAiB,EAAE,gBAAwB,EAAE,QAAgB;IACxG,IAAI,YAAoB,CAAC;IACzB,MAAM,OAAO,GAAa,EAAE,CAAC;IAC7B,MAAM,GAAG,GAAa,EAAE,CAAC;IAEzB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE;QAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;IAElD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACnC,YAAY,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,GAAG,gBAAgB,CAAC,GAAG,SAAS,GAAG,CAAC,CAAC;QAC1E,OAAO,CAAC,GAAG,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,gBAAgB,EAAE,SAAS,EAAE,YAAY,CAAC,CAAA;QACnF,OAAO,CAAC,YAAY,CAAC,EAAE,CAAC;KAC3B;IACD,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;IAEpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,EAAE,CAAC,EAAE;QAAC,OAAO,CAAC,CAAC,CAAC,IAAI,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;IAChE,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;IAEpB,KAAK,IAAI,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,EAAE;QACxC,YAAY,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,GAAG,gBAAgB,CAAC,GAAG,SAAS,GAAG,CAAC,CAAC;QAC1E,GAAG,CAAC,EAAE,OAAO,CAAC,YAAY,CAAC,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;QACxC,OAAO,CAAC,GAAG,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,QAAQ,EAAE,gBAAgB,EAAE,SAAS,EAAE,YAAY,CAAC,CAAA;KACrF;IACD,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAA;IAEpB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,MAAM,EAAE,CAAC,EAAE;QAAC,KAAK,CAAC,CAAC,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;IAExD,OAAO,KAAK,CAAC;AACjB,CAAC;AAED,MAAM,UAAU,SAAS,CAAC,KAAe,EAAE,YAAoB,EAAE;IAC7D,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC;QAAE,OAAO,KAAK,CAAC;IAEnC,MAAM,CAAC,QAAQ,EAAE,QAAQ,CAAC,GAAG,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;IAExE,IAAI,gBAAgB,GAAG,CAAC,CAAC;IACzB,OAAO,CAAC,QAAQ,GAAG,QAAQ,CAAC,GAAG,gBAAgB,IAAI,CAAC,EAAE;QAClD,KAAK,GAAG,oBAAoB,CAAC,KAAK,EAAE,SAAS,EAAE,gBAAgB,EAAE,QAAQ,CAAC,CAAC;QAC3E,gBAAgB,IAAI,SAAS,CAAC;KACjC;IAED,OAAO,KAAK,CAAC;AACjB,CAAC\"}"
}
