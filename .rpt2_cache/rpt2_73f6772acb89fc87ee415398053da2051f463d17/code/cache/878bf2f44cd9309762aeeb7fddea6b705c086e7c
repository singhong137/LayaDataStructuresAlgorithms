{
  "code": "import { defaultEquals, defaultCompare, Compare } from \"../util\";\r\nimport { Node, DoublyNode } from \"./data_models/Node\";\r\nexport class LinkedList {\r\n    constructor(equalsFn = defaultEquals) {\r\n        this.equalsFn = equalsFn;\r\n        this.count = 0;\r\n    }\r\n    push(element) {\r\n        const node = new Node(element);\r\n        let current;\r\n        if (this.head == null) {\r\n            this.head = node;\r\n        }\r\n        else {\r\n            current = this.head;\r\n            while (current.next != null)\r\n                current = current.next;\r\n            current.next = node;\r\n        }\r\n        this.count++;\r\n    }\r\n    insert(element, index) {\r\n        if (index >= 0 && index <= this.count) {\r\n            const node = new Node(element);\r\n            if (index === 0) {\r\n                const current = this.head;\r\n                node.next = current;\r\n                this.head = node;\r\n            }\r\n            else {\r\n                const previous = this.getElementAt(index - 1);\r\n                node.next = previous.next;\r\n                previous.next = node;\r\n            }\r\n            this.count++;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    getElementAt(index) {\r\n        if (index >= 0 && index <= this.count) {\r\n            let current = this.head;\r\n            for (let i = 0; i < index && current != null; i++)\r\n                current = current.next;\r\n            return current;\r\n        }\r\n        return undefined;\r\n    }\r\n    remove(element) {\r\n        const index = this.indexOf(element);\r\n        return this.removeAt(index);\r\n    }\r\n    indexOf(element) {\r\n        let current = this.head;\r\n        for (let i = 0; i < this.count && current != null; i++) {\r\n            if (this.equalsFn(element, current.element))\r\n                return i;\r\n            current = current.next;\r\n        }\r\n        return -1;\r\n    }\r\n    removeAt(index) {\r\n        if (index >= 0 && index < this.count) {\r\n            let current = this.head;\r\n            if (index === 0) {\r\n                this.head = current.next;\r\n            }\r\n            else {\r\n                const previous = this.getElementAt(index - 1);\r\n                current = previous.next;\r\n                previous.next = current.next;\r\n            }\r\n            this.count--;\r\n            return current.element;\r\n        }\r\n        return undefined;\r\n    }\r\n    isEmpty() {\r\n        return this.size() === 0;\r\n    }\r\n    size() {\r\n        return this.count;\r\n    }\r\n    getHead() {\r\n        return this.head;\r\n    }\r\n    clear() {\r\n        this.head = undefined;\r\n        this.count = 0;\r\n    }\r\n    toString() {\r\n        if (this.head == null)\r\n            return '';\r\n        let objString = `${this.head.element}`;\r\n        let current = this.head.next;\r\n        for (let i = 1; i < this.size() && current != null; i++) {\r\n            objString = `${objString},${current.element}`;\r\n            current = current.next;\r\n        }\r\n        return objString;\r\n    }\r\n}\r\nexport class DoublyLinkedList extends LinkedList {\r\n    constructor(equalsFn = defaultEquals) {\r\n        super(equalsFn);\r\n        this.equalsFn = equalsFn;\r\n    }\r\n    push(element) {\r\n        const node = new DoublyNode(element);\r\n        if (this.head == null) {\r\n            this.head = node;\r\n            this.tail = node;\r\n        }\r\n        else {\r\n            this.tail.next = node;\r\n            node.prev = this.tail;\r\n            this.tail = node;\r\n        }\r\n        this.count++;\r\n    }\r\n    insert(element, index) {\r\n        if (index >= 0 && index <= this.count) {\r\n            const node = new DoublyNode(element);\r\n            let current = this.head;\r\n            if (index == 0) {\r\n                if (this.head == null) {\r\n                    this.head = node;\r\n                    this.tail = node;\r\n                }\r\n                else {\r\n                    node.next = this.head;\r\n                    this.head.prev = node;\r\n                    this.head = node;\r\n                }\r\n            }\r\n            else if (index === this.count) {\r\n                current = this.tail;\r\n                current.next = node;\r\n                node.prev = current;\r\n                this.tail = node;\r\n            }\r\n            else {\r\n                const previous = this.getElementAt(index - 1);\r\n                current = previous.next;\r\n                node.next = current;\r\n                previous.next = node;\r\n                current.prev = node;\r\n                node.prev = previous;\r\n            }\r\n            this.count++;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    removeAt(index) {\r\n        if (index >= 0 && index < this.count) {\r\n            let current = this.head;\r\n            if (index === 0) {\r\n                this.head = this.head.next;\r\n                if (this.count === 1) {\r\n                    this.tail = undefined;\r\n                }\r\n                else {\r\n                    this.head.prev = undefined;\r\n                }\r\n            }\r\n            else if (index === this.count - 1) {\r\n                current = this.tail;\r\n                this.tail = current.prev;\r\n                this.tail.next = undefined;\r\n            }\r\n            else {\r\n                current = this.getElementAt(index);\r\n                const previous = current.prev;\r\n                previous.next = current.next;\r\n                current.next.prev = previous;\r\n            }\r\n            this.count--;\r\n            return current.element;\r\n        }\r\n        return undefined;\r\n    }\r\n    getHead() {\r\n        return this.head;\r\n    }\r\n    getTail() {\r\n        return this.tail;\r\n    }\r\n    clear() {\r\n        super.clear();\r\n        this.tail = undefined;\r\n    }\r\n    inverseToString() {\r\n        if (this.tail == null)\r\n            return '';\r\n        let objString = `${this.tail.element}`;\r\n        let previous = this.tail.prev;\r\n        while (previous != null) {\r\n            objString = `${objString},${previous.element}`;\r\n            previous = previous.prev;\r\n        }\r\n        return objString;\r\n    }\r\n}\r\nexport class CircularLinkedList extends LinkedList {\r\n    constructor(equalsFn = defaultEquals) {\r\n        super(equalsFn);\r\n        this.equalsFn = equalsFn;\r\n    }\r\n    push(element) {\r\n        const node = new Node(element);\r\n        let current;\r\n        if (this.head == null) {\r\n            this.head = node;\r\n        }\r\n        else {\r\n            current = this.getElementAt(this.size() - 1);\r\n            current.next = node;\r\n        }\r\n        node.next = this.head;\r\n        this.count++;\r\n    }\r\n    insert(element, index) {\r\n        if (index >= 0 && index <= this.count) {\r\n            const node = new Node(element);\r\n            let current = this.head;\r\n            if (index === 0) {\r\n                if (this.head == null) {\r\n                    this.head = node;\r\n                    node.next = this.head;\r\n                }\r\n                else {\r\n                    node.next = current;\r\n                    current = this.getElementAt(this.size());\r\n                    this.head = node;\r\n                    current.next = this.head;\r\n                }\r\n            }\r\n            else {\r\n                const previous = this.getElementAt(index - 1);\r\n                node.next = previous.next;\r\n                previous.next = node;\r\n            }\r\n            this.count++;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    removeAt(index) {\r\n        if (index >= 0 && index < this.count) {\r\n            let current = this.head;\r\n            if (index === 0) {\r\n                if (this.size() === 1) {\r\n                    this.head = undefined;\r\n                }\r\n                else {\r\n                    const removed = this.head;\r\n                    current = this.getElementAt(this.size() - 1);\r\n                    this.head = this.head.next;\r\n                    current.next = this.head;\r\n                    current = removed;\r\n                }\r\n            }\r\n            else {\r\n                const previous = this.getElementAt(index - 1);\r\n                current = previous.next;\r\n                previous.next = current.next;\r\n            }\r\n            this.count--;\r\n            return current.element;\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\nexport class SortedLinkedList extends LinkedList {\r\n    constructor(equalsFn = defaultEquals, compareFn = defaultCompare) {\r\n        super(equalsFn);\r\n        this.equalsFn = equalsFn;\r\n        this.compareFn = compareFn;\r\n    }\r\n    push(element) {\r\n        if (this.isEmpty()) {\r\n            super.push(element);\r\n        }\r\n        else {\r\n            const index = this.getIndexNextSortedElement(element);\r\n            super.insert(element, index);\r\n        }\r\n    }\r\n    insert(element, index = 0) {\r\n        if (this.isEmpty())\r\n            return super.insert(element, 0);\r\n        index = this.getIndexNextSortedElement(element);\r\n        return super.insert(element, index);\r\n    }\r\n    getIndexNextSortedElement(element) {\r\n        let current = this.head;\r\n        let i = 0;\r\n        for (; i < this.size() && current; i++) {\r\n            const comp = this.compareFn(element, current.element);\r\n            if (comp === Compare.LESS_THAN)\r\n                return i;\r\n            current = current.next;\r\n        }\r\n        return i;\r\n    }\r\n}\r\nexport class StackLinkedList {\r\n    constructor() {\r\n        this.items = new DoublyLinkedList();\r\n    }\r\n    push(element) {\r\n        this.items.push(element);\r\n    }\r\n    pop() {\r\n        if (this.isEmpty())\r\n            return undefined;\r\n        const result = this.items.removeAt(this.size() - 1);\r\n        return result;\r\n    }\r\n    peek() {\r\n        if (this.isEmpty())\r\n            return undefined;\r\n        return this.items.getElementAt(this.size() - 1).element;\r\n    }\r\n    isEmpty() {\r\n        return this.items.isEmpty();\r\n    }\r\n    size() {\r\n        return this.items.size();\r\n    }\r\n    clear() {\r\n        this.items.clear();\r\n    }\r\n    toString() {\r\n        return this.items.toString();\r\n    }\r\n}\r\n//# sourceMappingURL=LinkedList.js.map",
  "references": [
    "D:/widgets/LayaDataStructuresAlgorithms/src/util.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/src/data_structures/data_models/Node.ts"
  ],
  "map": "{\"version\":3,\"file\":\"LinkedList.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/data_structures/LinkedList.ts\"],\"names\":[],\"mappings\":\"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\"}"
}
