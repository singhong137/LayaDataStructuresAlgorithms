{
  "code": "import { Graphics } from \"../display/Graphics\";\r\nimport { Texture } from \"../resource/Texture\";\r\nimport { Utils } from \"../utils/Utils\";\r\nimport { ClassUtils } from \"../utils/ClassUtils\";\r\nimport { ILaya } from \"../../ILaya\";\r\nexport class AutoBitmap extends Graphics {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.autoCacheCmd = true;\r\n        this._width = 0;\r\n        this._height = 0;\r\n        this.uv = null;\r\n    }\r\n    destroy() {\r\n        super.destroy();\r\n        this._source = null;\r\n        this._sizeGrid = null;\r\n        this._offset = null;\r\n    }\r\n    get sizeGrid() {\r\n        return this._sizeGrid;\r\n    }\r\n    set sizeGrid(value) {\r\n        this._sizeGrid = value.map((v) => { return +v; });\r\n        this._setChanged();\r\n    }\r\n    get width() {\r\n        if (this._width)\r\n            return this._width;\r\n        if (this._source)\r\n            return this._source.sourceWidth;\r\n        return 0;\r\n    }\r\n    set width(value) {\r\n        if (this._width != value) {\r\n            this._width = value;\r\n            this._setChanged();\r\n        }\r\n    }\r\n    get height() {\r\n        if (this._height)\r\n            return this._height;\r\n        if (this._source)\r\n            return this._source.sourceHeight;\r\n        return 0;\r\n    }\r\n    set height(value) {\r\n        if (this._height != value) {\r\n            this._height = value;\r\n            this._setChanged();\r\n        }\r\n    }\r\n    get source() {\r\n        return this._source;\r\n    }\r\n    set source(value) {\r\n        if (value) {\r\n            this._source = value;\r\n            this._setChanged();\r\n        }\r\n        else {\r\n            this._source = null;\r\n            this.clear();\r\n        }\r\n    }\r\n    _setChanged() {\r\n        if (!this._isChanged) {\r\n            this._isChanged = true;\r\n            ILaya.timer.callLater(this, this.changeSource);\r\n        }\r\n    }\r\n    changeSource() {\r\n        this._isChanged = false;\r\n        var source = this._source;\r\n        if (!source || !source.bitmap)\r\n            return;\r\n        var width = this.width;\r\n        var height = this.height;\r\n        var sizeGrid = this._sizeGrid;\r\n        var sw = source.sourceWidth;\r\n        var sh = source.sourceHeight;\r\n        if (!sizeGrid || (sw === width && sh === height)) {\r\n            this.clear();\r\n            this.drawTexture(source, this._offset ? this._offset[0] : 0, this._offset ? this._offset[1] : 0, width, height, null, 1, null, null, this.uv);\r\n        }\r\n        else {\r\n            this.clear();\r\n            this.draw9Grid(source, 0, 0, width, height, sizeGrid);\r\n            this._repaint();\r\n            return;\r\n        }\r\n        this._repaint();\r\n    }\r\n    drawBitmap(repeat, tex, x, y, width = 0, height = 0) {\r\n        if (width < 0.1 || height < 0.1)\r\n            return;\r\n        if (repeat && (tex.width != width || tex.height != height))\r\n            this.fillTexture(tex, x, y, width, height);\r\n        else\r\n            this.drawImage(tex, x, y, width, height);\r\n    }\r\n    static getTexture(tex, x, y, width, height) {\r\n        if (width <= 0)\r\n            width = 1;\r\n        if (height <= 0)\r\n            height = 1;\r\n        tex.$_GID || (tex.$_GID = Utils.getGID());\r\n        var texture;\r\n        if (!texture || !texture._getSource()) {\r\n            texture = Texture.createFromTexture(tex, x, y, width, height);\r\n        }\r\n        return texture;\r\n    }\r\n}\r\nClassUtils.regClass(\"laya.ui.AutoBitmap\", AutoBitmap);\r\nClassUtils.regClass(\"Laya.AutoBitmap\", AutoBitmap);\r\n",
  "references": [
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/display/Graphics.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/resource/Texture.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/utils/Utils.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/utils/ClassUtils.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/ILaya.ts"
  ],
  "dts": {
    "name": "D:/widgets/LayaDataStructuresAlgorithms/.rpt2_cache/placeholder/laya/ui/AutoBitmap.d.ts",
    "writeByteOrderMark": false,
    "text": "import { Graphics } from \"../display/Graphics\";\r\nimport { Texture } from \"../resource/Texture\";\r\nexport declare class AutoBitmap extends Graphics {\r\n    autoCacheCmd: boolean;\r\n    private _width;\r\n    private _height;\r\n    private _source;\r\n    private _sizeGrid;\r\n    protected _isChanged: boolean;\r\n    _offset: any[];\r\n    uv: number[];\r\n    destroy(): void;\r\n    sizeGrid: number[];\r\n    width: number;\r\n    height: number;\r\n    source: Texture;\r\n    protected _setChanged(): void;\r\n    protected changeSource(): void;\r\n    private drawBitmap;\r\n    private static getTexture;\r\n}\r\n"
  }
}
