{
  "code": "import { Script } from \"laya/components/Script\";\r\nimport Set from \"../data_structures/Set\";\r\nexport default class SetTest extends Script {\r\n    constructor() {\r\n        super();\r\n    }\r\n    onEnable() {\r\n        console.log('SET');\r\n        const set = new Set();\r\n        set.add(1);\r\n        console.log(set.values());\r\n        console.log(set.has(1));\r\n        console.log(set.size());\r\n        set.add(2);\r\n        console.log(set.values());\r\n        console.log(set.has(2));\r\n        console.log(set.size());\r\n        set.delete(1);\r\n        console.log(set.values());\r\n        set.delete(2);\r\n        console.log(set.values());\r\n        const setA = new Set();\r\n        setA.add(1);\r\n        setA.add(2);\r\n        setA.add(3);\r\n        setA.add(6);\r\n        const setB = new Set();\r\n        setB.add(3);\r\n        setB.add(4);\r\n        setB.add(5);\r\n        setB.add(6);\r\n        const unionAB = setA.union(setB);\r\n        console.log('unionAB', unionAB.values());\r\n        const intersectionAB = setA.intersection(setB);\r\n        console.log('intersetionAB', intersectionAB.values());\r\n        const differenceAB = setA.difference(setB);\r\n        console.log('differenceAB', differenceAB.values());\r\n        const setC = new Set();\r\n        setC.add(1);\r\n        setC.add(2);\r\n        setC.add(3);\r\n        setC.add(6);\r\n        setC.add(4);\r\n        console.log('isSubsetOf', setA.isSubsetOf(setC));\r\n        Object.keys;\r\n        Object.values;\r\n        Array.includes;\r\n    }\r\n}\r\n",
  "references": [
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/components/Script.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/src/data_structures/Set.ts"
  ]
}
