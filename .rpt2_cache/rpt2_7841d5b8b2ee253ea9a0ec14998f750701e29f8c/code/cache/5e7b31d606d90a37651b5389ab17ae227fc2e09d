{
  "code": "import { Point } from \"../maths/Point\";\r\nimport { Rectangle } from \"../maths/Rectangle\";\r\nimport { ILaya } from \"../../ILaya\";\r\nexport class HitArea {\r\n    contains(x, y) {\r\n        if (!HitArea._isHitGraphic(x, y, this.hit))\r\n            return false;\r\n        return !HitArea._isHitGraphic(x, y, this.unHit);\r\n    }\r\n    static _isHitGraphic(x, y, graphic) {\r\n        if (!graphic)\r\n            return false;\r\n        var cmds = graphic.cmds;\r\n        if (!cmds && graphic._one) {\r\n            cmds = HitArea._cmds;\r\n            cmds.length = 1;\r\n            cmds[0] = graphic._one;\r\n        }\r\n        if (!cmds)\r\n            return false;\r\n        var i, len;\r\n        len = cmds.length;\r\n        var cmd;\r\n        for (i = 0; i < len; i++) {\r\n            cmd = cmds[i];\r\n            if (!cmd)\r\n                continue;\r\n            switch (cmd.cmdID) {\r\n                case \"Translate\":\r\n                    x -= cmd.tx;\r\n                    y -= cmd.ty;\r\n            }\r\n            if (HitArea._isHitCmd(x, y, cmd))\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n    static _isHitCmd(x, y, cmd) {\r\n        if (!cmd)\r\n            return false;\r\n        var rst = false;\r\n        switch (cmd.cmdID) {\r\n            case \"DrawRect\":\r\n                HitArea._rect.setTo(cmd.x, cmd.y, cmd.width, cmd.height);\r\n                rst = HitArea._rect.contains(x, y);\r\n                break;\r\n            case \"DrawCircle\":\r\n                var d;\r\n                x -= cmd.x;\r\n                y -= cmd.y;\r\n                d = x * x + y * y;\r\n                rst = d < cmd.radius * cmd.radius;\r\n                break;\r\n            case \"DrawPoly\":\r\n                x -= cmd.x;\r\n                y -= cmd.y;\r\n                rst = HitArea._ptInPolygon(x, y, cmd.points);\r\n                break;\r\n        }\r\n        return rst;\r\n    }\r\n    static _ptInPolygon(x, y, areaPoints) {\r\n        var p = HitArea._ptPoint;\r\n        p.setTo(x, y);\r\n        var nCross = 0;\r\n        var p1x, p1y, p2x, p2y;\r\n        var len;\r\n        len = areaPoints.length;\r\n        for (var i = 0; i < len; i += 2) {\r\n            p1x = areaPoints[i];\r\n            p1y = areaPoints[i + 1];\r\n            p2x = areaPoints[(i + 2) % len];\r\n            p2y = areaPoints[(i + 3) % len];\r\n            if (p1y == p2y)\r\n                continue;\r\n            if (p.y < Math.min(p1y, p2y))\r\n                continue;\r\n            if (p.y >= Math.max(p1y, p2y))\r\n                continue;\r\n            var tx = (p.y - p1y) * (p2x - p1x) / (p2y - p1y) + p1x;\r\n            if (tx > p.x)\r\n                nCross++;\r\n        }\r\n        return (nCross % 2 == 1);\r\n    }\r\n    get hit() {\r\n        if (!this._hit)\r\n            this._hit = new ILaya.Graphics();\r\n        return this._hit;\r\n    }\r\n    set hit(value) {\r\n        this._hit = value;\r\n    }\r\n    get unHit() {\r\n        if (!this._unHit)\r\n            this._unHit = new ILaya.Graphics();\r\n        return this._unHit;\r\n    }\r\n    set unHit(value) {\r\n        this._unHit = value;\r\n    }\r\n}\r\nHitArea._cmds = [];\r\nHitArea._rect = new Rectangle();\r\nHitArea._ptPoint = new Point();\r\n//# sourceMappingURL=HitArea.js.map",
  "references": [
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/display/Graphics.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/maths/Point.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/maths/Rectangle.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/ILaya.ts"
  ],
  "map": "{\"version\":3,\"file\":\"HitArea.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../libs/laya/utils/HitArea.ts\"],\"names\":[],\"mappings\":\"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\"}",
  "dts": {
    "name": "D:/widgets/LayaDataStructuresAlgorithms/.rpt2_cache/placeholder/laya/utils/HitArea.d.ts",
    "writeByteOrderMark": false,
    "text": "import { Graphics } from \"../display/Graphics\";\r\nexport declare class HitArea {\r\n    private static _cmds;\r\n    private static _rect;\r\n    private static _ptPoint;\r\n    private _hit;\r\n    private _unHit;\r\n    contains(x: number, y: number): boolean;\r\n    static _isHitGraphic(x: number, y: number, graphic: Graphics): boolean;\r\n    static _isHitCmd(x: number, y: number, cmd: any): boolean;\r\n    static _ptInPolygon(x: number, y: number, areaPoints: any[]): boolean;\r\n    hit: Graphics;\r\n    unHit: Graphics;\r\n}\r\n"
  }
}
