{
  "code": "import { ICharRender } from \"./ICharRender\";\r\nimport { ColorUtils } from \"../../utils/ColorUtils\";\r\nexport class CharRender_Native extends ICharRender {\r\n    constructor() {\r\n        super();\r\n        this.lastFont = '';\r\n        this.lastScaleX = 1.0;\r\n        this.lastScaleY = 1.0;\r\n    }\r\n    getWidth(font, str) {\r\n        if (!window.conchTextCanvas)\r\n            return 0;\r\n        window.conchTextCanvas.font = font;\r\n        this.lastFont = font;\r\n        return window.conchTextCanvas.measureText(str).width;\r\n    }\r\n    scale(sx, sy) {\r\n        this.lastScaleX = sx;\r\n        this.lastScaleY = sy;\r\n    }\r\n    getCharBmp(char, font, lineWidth, colStr, strokeColStr, size, margin_left, margin_top, margin_right, margin_bottom, rect = null) {\r\n        if (!window.conchTextCanvas)\r\n            return null;\r\n        window.conchTextCanvas.font = font;\r\n        this.lastFont = font;\r\n        var w = size.width = window.conchTextCanvas.measureText(char).width;\r\n        var h = size.height;\r\n        w += (margin_left + margin_right);\r\n        h += (margin_top + margin_bottom);\r\n        window.conchTextCanvas.scale && window.conchTextCanvas.scale(this.lastScaleX, this.lastScaleY);\r\n        var c1 = ColorUtils.create(strokeColStr);\r\n        var nStrokeColor = c1.numColor;\r\n        var c2 = ColorUtils.create(colStr);\r\n        var nTextColor = c2.numColor;\r\n        var textInfo = window.conchTextCanvas.getTextBitmapData(char, nTextColor, lineWidth > 2 ? 2 : lineWidth, nStrokeColor);\r\n        size.bmpWidth = textInfo.width;\r\n        size.bmpHeight = textInfo.height;\r\n        return textInfo;\r\n    }\r\n}\r\n//# sourceMappingURL=CharRender_Native.js.map",
  "references": [
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/webgl/text/CharRenderInfo.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/webgl/text/ICharRender.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/utils/ColorUtils.ts"
  ],
  "map": "{\"version\":3,\"file\":\"CharRender_Native.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../libs/laya/webgl/text/CharRender_Native.ts\"],\"names\":[],\"mappings\":\"AACA,OAAO,EAAE,WAAW,EAAE,MAAM,eAAe,CAAA;AAC3C,OAAO,EAAE,UAAU,EAAE,MAAM,wBAAwB,CAAA;AACnD,MAAM,OAAO,iBAAkB,SAAQ,WAAW;IAMjD;QACC,KAAK,EAAE,CAAC;QAND,aAAQ,GAAW,EAAE,CAAC;QACtB,eAAU,GAAW,GAAG,CAAC;QACzB,eAAU,GAAW,GAAG,CAAC;IAMjC,CAAC;IAQA,QAAQ,CAAC,IAAY,EAAE,GAAW;QAClC,IAAI,CAAE,MAAc,CAAC,eAAe;YAAE,OAAO,CAAC,CAAC;QAG9C,MAAc,CAAC,eAAe,CAAC,IAAI,GAAG,IAAI,CAAC;QAC5C,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QAIrB,OAAQ,MAAc,CAAC,eAAe,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,KAAK,CAAC;IAC/D,CAAC;IAQD,KAAK,CAAC,EAAU,EAAE,EAAU;QAC3B,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;QACrB,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;IACtB,CAAC;IASD,UAAU,CAAC,IAAY,EAAE,IAAY,EAAE,SAAiB,EAAE,MAAc,EAAE,YAAoB,EAAE,IAAoB,EACnH,WAAmB,EAAE,UAAkB,EAAE,YAAoB,EAAE,aAAqB,EAAE,OAAqB,IAAI;QAE/G,IAAI,CAAE,MAAc,CAAC,eAAe;YAAE,OAAO,IAAI,CAAC;QAKjD,MAAc,CAAC,eAAe,CAAC,IAAI,GAAG,IAAI,CAAC;QAC5C,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QAErB,IAAI,CAAC,GAAW,IAAI,CAAC,KAAK,GAAI,MAAc,CAAC,eAAe,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC;QACrF,IAAI,CAAC,GAAW,IAAI,CAAC,MAAM,CAAC;QAC5B,CAAC,IAAI,CAAC,WAAW,GAAG,YAAY,CAAC,CAAC;QAClC,CAAC,IAAI,CAAC,UAAU,GAAG,aAAa,CAAC,CAAC;QAEjC,MAAc,CAAC,eAAe,CAAC,KAAK,IAAK,MAAc,CAAC,eAAe,CAAC,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,CAAC;QAEjH,IAAI,EAAE,GAAe,UAAU,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC;QACrD,IAAI,YAAY,GAAW,EAAE,CAAC,QAAQ,CAAC;QACvC,IAAI,EAAE,GAAe,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QAC/C,IAAI,UAAU,GAAW,EAAE,CAAC,QAAQ,CAAC;QACrC,IAAI,QAAQ,GAAS,MAAc,CAAC,eAAe,CAAC,iBAAiB,CAAC,IAAI,EAAE,UAAU,EAAE,SAAS,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,SAAS,EAAE,YAAY,CAAC,CAAC;QAGrI,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC,KAAK,CAAC;QAC/B,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC,MAAM,CAAC;QACjC,OAAO,QAAQ,CAAC;IAsBjB,CAAC;CACD\"}",
  "dts": {
    "name": "D:/widgets/LayaDataStructuresAlgorithms/.rpt2_cache/placeholder/laya/webgl/text/CharRender_Native.d.ts",
    "writeByteOrderMark": false,
    "text": "import { CharRenderInfo } from \"./CharRenderInfo\";\r\nimport { ICharRender } from \"./ICharRender\";\r\nexport declare class CharRender_Native extends ICharRender {\r\n    private lastFont;\r\n    private lastScaleX;\r\n    private lastScaleY;\r\n    constructor();\r\n    getWidth(font: string, str: string): number;\r\n    scale(sx: number, sy: number): void;\r\n    getCharBmp(char: string, font: string, lineWidth: number, colStr: string, strokeColStr: string, size: CharRenderInfo, margin_left: number, margin_top: number, margin_right: number, margin_bottom: number, rect?: any[] | null): ImageData | null;\r\n}\r\n"
  }
}
