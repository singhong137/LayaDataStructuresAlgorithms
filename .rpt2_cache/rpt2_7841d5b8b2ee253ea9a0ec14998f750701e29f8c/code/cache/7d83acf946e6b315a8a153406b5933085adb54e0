{
  "code": "import { EventDispatcher } from \"../events/EventDispatcher\";\r\nexport class SoundChannel extends EventDispatcher {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.isStopped = false;\r\n    }\r\n    set volume(v) {\r\n    }\r\n    get volume() {\r\n        return 1;\r\n    }\r\n    get position() {\r\n        return 0;\r\n    }\r\n    get duration() {\r\n        return 0;\r\n    }\r\n    play() {\r\n    }\r\n    stop() {\r\n        if (this.completeHandler)\r\n            this.completeHandler.run();\r\n    }\r\n    pause() {\r\n    }\r\n    resume() {\r\n    }\r\n    __runComplete(handler) {\r\n        if (handler) {\r\n            handler.run();\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=SoundChannel.js.map",
  "references": [
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/events/EventDispatcher.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/utils/Handler.ts"
  ],
  "map": "{\"version\":3,\"file\":\"SoundChannel.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../libs/laya/media/SoundChannel.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,eAAe,EAAE,MAAM,2BAA2B,CAAA;AAO3D,MAAM,OAAO,YAAa,SAAQ,eAAe;IAAjD;;QAgBI,cAAS,GAAY,KAAK,CAAC;IAiE/B,CAAC;IAxDG,IAAI,MAAM,CAAC,CAAS;IAEpB,CAAC;IAED,IAAI,MAAM;QACN,OAAO,CAAC,CAAC;IACb,CAAC;IAKD,IAAI,QAAQ;QACR,OAAO,CAAC,CAAC;IACb,CAAC;IAKD,IAAI,QAAQ;QACR,OAAO,CAAC,CAAC;IACb,CAAC;IAKD,IAAI;IAEJ,CAAC;IAKD,IAAI;QACA,IAAI,IAAI,CAAC,eAAe;YAAE,IAAI,CAAC,eAAe,CAAC,GAAG,EAAE,CAAC;IACzD,CAAC;IAKD,KAAK;IACL,CAAC;IAKD,MAAM;IACN,CAAC;IAKS,aAAa,CAAC,OAAgB;QACpC,IAAI,OAAO,EAAE;YACT,OAAO,CAAC,GAAG,EAAE,CAAC;SACjB;IACL,CAAC;CACJ\"}",
  "dts": {
    "name": "D:/widgets/LayaDataStructuresAlgorithms/.rpt2_cache/placeholder/laya/media/SoundChannel.d.ts",
    "writeByteOrderMark": false,
    "text": "import { EventDispatcher } from \"../events/EventDispatcher\";\r\nimport { Handler } from \"../utils/Handler\";\r\nexport declare class SoundChannel extends EventDispatcher {\r\n    url: string;\r\n    loops: number;\r\n    startTime: number;\r\n    isStopped: boolean;\r\n    completeHandler: Handler;\r\n    volume: number;\r\n    readonly position: number;\r\n    readonly duration: number;\r\n    play(): void;\r\n    stop(): void;\r\n    pause(): void;\r\n    resume(): void;\r\n    protected __runComplete(handler: Handler): void;\r\n}\r\n"
  }
}
