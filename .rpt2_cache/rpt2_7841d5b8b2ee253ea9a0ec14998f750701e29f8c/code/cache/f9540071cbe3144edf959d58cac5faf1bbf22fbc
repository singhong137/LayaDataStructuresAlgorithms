{
  "code": "import { Event } from \"../events/Event\";\r\nimport { EventDispatcher } from \"../events/EventDispatcher\";\r\nimport { Rectangle } from \"../maths/Rectangle\";\r\nimport { Handler } from \"../utils/Handler\";\r\nimport { ILaya } from \"../../ILaya\";\r\nexport class Texture extends EventDispatcher {\r\n    constructor(bitmap = null, uv = null, sourceWidth = 0, sourceHeight = 0) {\r\n        super();\r\n        this.uvrect = [0, 0, 1, 1];\r\n        this._destroyed = false;\r\n        this._referenceCount = 0;\r\n        this.$_GID = 0;\r\n        this.offsetX = 0;\r\n        this.offsetY = 0;\r\n        this._w = 0;\r\n        this._h = 0;\r\n        this.sourceWidth = 0;\r\n        this.sourceHeight = 0;\r\n        this.url = null;\r\n        this.scaleRate = 1;\r\n        this.setTo(bitmap, uv, sourceWidth, sourceHeight);\r\n    }\r\n    static moveUV(offsetX, offsetY, uv) {\r\n        for (var i = 0; i < 8; i += 2) {\r\n            uv[i] += offsetX;\r\n            uv[i + 1] += offsetY;\r\n        }\r\n        return uv;\r\n    }\r\n    static create(source, x, y, width, height, offsetX = 0, offsetY = 0, sourceWidth = 0, sourceHeight = 0) {\r\n        return Texture._create(source, x, y, width, height, offsetX, offsetY, sourceWidth, sourceHeight);\r\n    }\r\n    static _create(source, x, y, width, height, offsetX = 0, offsetY = 0, sourceWidth = 0, sourceHeight = 0, outTexture = null) {\r\n        var btex = source instanceof Texture;\r\n        var uv = btex ? source.uv : Texture.DEF_UV;\r\n        var bitmap = btex ? source.bitmap : source;\r\n        if (bitmap.width && (x + width) > bitmap.width)\r\n            width = bitmap.width - x;\r\n        if (bitmap.height && (y + height) > bitmap.height)\r\n            height = bitmap.height - y;\r\n        var tex;\r\n        if (outTexture) {\r\n            tex = outTexture;\r\n            tex.setTo(bitmap, null, sourceWidth || width, sourceHeight || height);\r\n        }\r\n        else {\r\n            tex = new Texture(bitmap, null, sourceWidth || width, sourceHeight || height);\r\n        }\r\n        tex.width = width;\r\n        tex.height = height;\r\n        tex.offsetX = offsetX;\r\n        tex.offsetY = offsetY;\r\n        var dwidth = 1 / bitmap.width;\r\n        var dheight = 1 / bitmap.height;\r\n        x *= dwidth;\r\n        y *= dheight;\r\n        width *= dwidth;\r\n        height *= dheight;\r\n        var u1 = tex.uv[0], v1 = tex.uv[1], u2 = tex.uv[4], v2 = tex.uv[5];\r\n        var inAltasUVWidth = (u2 - u1), inAltasUVHeight = (v2 - v1);\r\n        var oriUV = Texture.moveUV(uv[0], uv[1], [x, y, x + width, y, x + width, y + height, x, y + height]);\r\n        tex.uv = new Float32Array([u1 + oriUV[0] * inAltasUVWidth, v1 + oriUV[1] * inAltasUVHeight,\r\n            u2 - (1 - oriUV[2]) * inAltasUVWidth, v1 + oriUV[3] * inAltasUVHeight,\r\n            u2 - (1 - oriUV[4]) * inAltasUVWidth, v2 - (1 - oriUV[5]) * inAltasUVHeight,\r\n            u1 + oriUV[6] * inAltasUVWidth, v2 - (1 - oriUV[7]) * inAltasUVHeight]);\r\n        var bitmapScale = bitmap.scaleRate;\r\n        if (bitmapScale && bitmapScale != 1) {\r\n            tex.sourceWidth /= bitmapScale;\r\n            tex.sourceHeight /= bitmapScale;\r\n            tex.width /= bitmapScale;\r\n            tex.height /= bitmapScale;\r\n            tex.scaleRate = bitmapScale;\r\n        }\r\n        else {\r\n            tex.scaleRate = 1;\r\n        }\r\n        return tex;\r\n    }\r\n    static createFromTexture(texture, x, y, width, height) {\r\n        var texScaleRate = texture.scaleRate;\r\n        if (texScaleRate != 1) {\r\n            x *= texScaleRate;\r\n            y *= texScaleRate;\r\n            width *= texScaleRate;\r\n            height *= texScaleRate;\r\n        }\r\n        var rect = Rectangle.TEMP.setTo(x - texture.offsetX, y - texture.offsetY, width, height);\r\n        var result = rect.intersection(Texture._rect1.setTo(0, 0, texture.width, texture.height), Texture._rect2);\r\n        if (result)\r\n            var tex = Texture.create(texture, result.x, result.y, result.width, result.height, result.x - rect.x, result.y - rect.y, width, height);\r\n        else\r\n            return null;\r\n        return tex;\r\n    }\r\n    get uv() {\r\n        return this._uv;\r\n    }\r\n    set uv(value) {\r\n        this.uvrect[0] = Math.min(value[0], value[2], value[4], value[6]);\r\n        this.uvrect[1] = Math.min(value[1], value[3], value[5], value[7]);\r\n        this.uvrect[2] = Math.max(value[0], value[2], value[4], value[6]) - this.uvrect[0];\r\n        this.uvrect[3] = Math.max(value[1], value[3], value[5], value[7]) - this.uvrect[1];\r\n        this._uv = value;\r\n    }\r\n    get width() {\r\n        if (this._w)\r\n            return this._w;\r\n        if (!this.bitmap)\r\n            return 0;\r\n        return (this.uv && this.uv !== Texture.DEF_UV) ? (this.uv[2] - this.uv[0]) * this.bitmap.width : this.bitmap.width;\r\n    }\r\n    set width(value) {\r\n        this._w = value;\r\n        this.sourceWidth || (this.sourceWidth = value);\r\n    }\r\n    get height() {\r\n        if (this._h)\r\n            return this._h;\r\n        if (!this.bitmap)\r\n            return 0;\r\n        return (this.uv && this.uv !== Texture.DEF_UV) ? (this.uv[5] - this.uv[1]) * this.bitmap.height : this.bitmap.height;\r\n    }\r\n    set height(value) {\r\n        this._h = value;\r\n        this.sourceHeight || (this.sourceHeight = value);\r\n    }\r\n    get bitmap() {\r\n        return this._bitmap;\r\n    }\r\n    set bitmap(value) {\r\n        this._bitmap && this._bitmap._removeReference(this._referenceCount);\r\n        this._bitmap = value;\r\n        value && (value._addReference(this._referenceCount));\r\n    }\r\n    get destroyed() {\r\n        return this._destroyed;\r\n    }\r\n    _addReference() {\r\n        this._bitmap && this._bitmap._addReference();\r\n        this._referenceCount++;\r\n    }\r\n    _removeReference() {\r\n        this._bitmap && this._bitmap._removeReference();\r\n        this._referenceCount--;\r\n    }\r\n    _getSource(cb = null) {\r\n        if (this._destroyed || !this._bitmap)\r\n            return null;\r\n        this.recoverBitmap(cb);\r\n        return this._bitmap.destroyed ? null : this.bitmap._getSource();\r\n    }\r\n    _onLoaded(complete, context) {\r\n        if (!context) {\r\n        }\r\n        else if (context == this) {\r\n        }\r\n        else if (context instanceof Texture) {\r\n            var tex = context;\r\n            Texture._create(context, 0, 0, tex.width, tex.height, 0, 0, tex.sourceWidth, tex.sourceHeight, this);\r\n        }\r\n        else {\r\n            this.bitmap = context;\r\n            this.sourceWidth = this._w = context.width;\r\n            this.sourceHeight = this._h = context.height;\r\n        }\r\n        complete && complete.run();\r\n        this.event(Event.READY, this);\r\n    }\r\n    getIsReady() {\r\n        return this._destroyed ? false : (this._bitmap ? true : false);\r\n    }\r\n    setTo(bitmap = null, uv = null, sourceWidth = 0, sourceHeight = 0) {\r\n        this.bitmap = bitmap;\r\n        this.sourceWidth = sourceWidth;\r\n        this.sourceHeight = sourceHeight;\r\n        if (bitmap) {\r\n            this._w = bitmap.width;\r\n            this._h = bitmap.height;\r\n            this.sourceWidth = this.sourceWidth || bitmap.width;\r\n            this.sourceHeight = this.sourceHeight || bitmap.height;\r\n        }\r\n        this.uv = uv || Texture.DEF_UV;\r\n    }\r\n    load(url, complete = null) {\r\n        if (!this._destroyed)\r\n            ILaya.loader.load(url, Handler.create(this, this._onLoaded, [complete]), null, \"htmlimage\", 1, true);\r\n    }\r\n    getTexturePixels(x, y, width, height) {\r\n        var st, dst, i;\r\n        var tex2d = this.bitmap;\r\n        var texw = this._w;\r\n        var texh = this._h;\r\n        var sourceWidth = this.sourceWidth;\r\n        var sourceHeight = this.sourceHeight;\r\n        var tex2dw = tex2d.width;\r\n        var tex2dh = tex2d.height;\r\n        var offsetX = this.offsetX;\r\n        var offsetY = this.offsetY;\r\n        let draww = width;\r\n        let drawh = height;\r\n        if (x + width > texw + offsetX)\r\n            draww -= (x + width) - texw - offsetX;\r\n        if (x + width > sourceWidth)\r\n            width -= (x + width) - sourceWidth;\r\n        if (y + height > texh + offsetY)\r\n            drawh -= (y + height) - texh - offsetY;\r\n        if (y + height > sourceHeight)\r\n            height -= (y + height) - sourceHeight;\r\n        if (width <= 0 || height <= 0)\r\n            return null;\r\n        let marginL = offsetX > x ? offsetX - x : 0;\r\n        let marginT = offsetY > y ? offsetY - y : 0;\r\n        let rePosX = x > offsetX ? x - offsetX : 0;\r\n        let rePosY = y > offsetY ? y - offsetY : 0;\r\n        draww -= marginL;\r\n        drawh -= marginT;\r\n        var wstride = width * 4;\r\n        var pix = null;\r\n        try {\r\n            pix = tex2d.getPixels();\r\n        }\r\n        catch (e) {\r\n        }\r\n        if (pix) {\r\n            if (x == 0 && y == 0 && width == tex2dw && height == tex2dh)\r\n                return pix;\r\n            let uv = this._uv.slice();\r\n            let atlasPosX = Math.round(uv[0] * tex2dw);\r\n            let atlasPosY = Math.round(uv[1] * tex2dh);\r\n            var ret = new Uint8Array(width * height * 4);\r\n            wstride = tex2dw * 4;\r\n            dst = (atlasPosY + rePosY) * wstride;\r\n            st = atlasPosX * 4 + rePosX * 4 + dst;\r\n            for (i = 0; i < drawh; i++) {\r\n                ret.set(pix.slice(st, st + draww * 4), width * 4 * (i + marginT) + marginL * 4);\r\n                st += wstride;\r\n            }\r\n            return ret;\r\n        }\r\n        var ctx = new ILaya.Context();\r\n        ctx.size(width, height);\r\n        ctx.asBitmap = true;\r\n        var uv = null;\r\n        if (x != 0 || y != 0 || width != tex2dw || height != tex2dh) {\r\n            uv = this._uv.slice();\r\n            var stu = uv[0];\r\n            var stv = uv[1];\r\n            var uvw = uv[2] - stu;\r\n            var uvh = uv[7] - stv;\r\n            var uk = uvw / texw;\r\n            var vk = uvh / texh;\r\n            uv = [stu + rePosX * uk, stv + rePosY * vk,\r\n                stu + (rePosX + draww) * uk, stv + rePosY * vk,\r\n                stu + (rePosX + draww) * uk, stv + (rePosY + drawh) * vk,\r\n                stu + rePosX * uk, stv + (rePosY + drawh) * vk];\r\n        }\r\n        ctx._drawTextureM(this, marginL, marginT, draww, drawh, null, 1.0, uv);\r\n        ctx._targets.start();\r\n        ctx.flush();\r\n        ctx._targets.end();\r\n        ctx._targets.restore();\r\n        var dt = ctx._targets.getData(0, 0, width, height);\r\n        ctx.destroy();\r\n        ret = new Uint8Array(width * height * 4);\r\n        st = 0;\r\n        dst = (height - 1) * wstride;\r\n        for (i = height - 1; i >= 0; i--) {\r\n            ret.set(dt.slice(dst, dst + wstride), st);\r\n            st += wstride;\r\n            dst -= wstride;\r\n        }\r\n        return ret;\r\n    }\r\n    getPixels(x, y, width, height) {\r\n        if (window.conch) {\r\n            return this._nativeObj.getImageData(x, y, width, height);\r\n        }\r\n        else {\r\n            return this.getTexturePixels(x, y, width, height);\r\n        }\r\n    }\r\n    recoverBitmap(onok = null) {\r\n        var url = this._bitmap.url;\r\n        if (!this._destroyed && (!this._bitmap || this._bitmap.destroyed) && url) {\r\n            ILaya.loader.load(url, Handler.create(this, function (bit) {\r\n                this.bitmap = bit;\r\n                onok && onok();\r\n            }), null, \"htmlimage\", 1, true);\r\n        }\r\n    }\r\n    disposeBitmap() {\r\n        if (!this._destroyed && this._bitmap) {\r\n            this._bitmap.destroy();\r\n        }\r\n    }\r\n    destroy(force = false) {\r\n        if (!this._destroyed) {\r\n            this._destroyed = true;\r\n            var bit = this._bitmap;\r\n            if (bit) {\r\n                bit._removeReference(this._referenceCount);\r\n                if (bit.referenceCount === 0 || force)\r\n                    bit.destroy();\r\n                bit = null;\r\n            }\r\n            if (this.url && this === ILaya.loader.getRes(this.url))\r\n                ILaya.Loader.clearRes(this.url);\r\n        }\r\n    }\r\n}\r\nTexture.DEF_UV = new Float32Array([0, 0, 1.0, 0, 1.0, 1.0, 0, 1.0]);\r\nTexture.NO_UV = new Float32Array([0, 0, 0, 0, 0, 0, 0, 0]);\r\nTexture.INV_UV = new Float32Array([0, 1, 1.0, 1, 1.0, 0.0, 0, 0.0]);\r\nTexture._rect1 = new Rectangle();\r\nTexture._rect2 = new Rectangle();\r\n//# sourceMappingURL=Texture.js.map",
  "references": [
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/resource/Texture2D.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/events/Event.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/events/EventDispatcher.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/maths/Rectangle.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/utils/Handler.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/net/LoaderManager.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/ILaya.ts"
  ],
  "map": "{\"version\":3,\"file\":\"Texture.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../libs/laya/resource/Texture.ts\"],\"names\":[],\"mappings\":\"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\"}",
  "dts": {
    "name": "D:/widgets/LayaDataStructuresAlgorithms/.rpt2_cache/placeholder/laya/resource/Texture.d.ts",
    "writeByteOrderMark": false,
    "text": "import { Texture2D } from \"./Texture2D\";\r\nimport { EventDispatcher } from \"../events/EventDispatcher\";\r\nimport { Handler } from \"../utils/Handler\";\r\nexport declare class Texture extends EventDispatcher {\r\n    static DEF_UV: Float32Array;\r\n    static NO_UV: Float32Array;\r\n    static INV_UV: Float32Array;\r\n    private static _rect1;\r\n    private static _rect2;\r\n    uvrect: any[];\r\n    private _destroyed;\r\n    private _bitmap;\r\n    _uv: ArrayLike<number>;\r\n    private _referenceCount;\r\n    _nativeObj: any;\r\n    $_GID: number;\r\n    offsetX: number;\r\n    offsetY: number;\r\n    private _w;\r\n    private _h;\r\n    sourceWidth: number;\r\n    sourceHeight: number;\r\n    url: string;\r\n    scaleRate: number;\r\n    static moveUV(offsetX: number, offsetY: number, uv: any[]): any[];\r\n    static create(source: Texture2D | Texture, x: number, y: number, width: number, height: number, offsetX?: number, offsetY?: number, sourceWidth?: number, sourceHeight?: number): Texture;\r\n    static _create(source: Texture2D | Texture, x: number, y: number, width: number, height: number, offsetX?: number, offsetY?: number, sourceWidth?: number, sourceHeight?: number, outTexture?: Texture): Texture;\r\n    static createFromTexture(texture: Texture, x: number, y: number, width: number, height: number): Texture;\r\n    uv: ArrayLike<number>;\r\n    width: number;\r\n    height: number;\r\n    bitmap: Texture2D | Texture;\r\n    readonly destroyed: boolean;\r\n    constructor(bitmap?: Texture2D | Texture, uv?: ArrayLike<number>, sourceWidth?: number, sourceHeight?: number);\r\n    _addReference(): void;\r\n    _removeReference(): void;\r\n    _getSource(cb?: Function): any;\r\n    private _onLoaded;\r\n    getIsReady(): boolean;\r\n    setTo(bitmap?: Texture2D | Texture, uv?: ArrayLike<number>, sourceWidth?: number, sourceHeight?: number): void;\r\n    load(url: string, complete?: Handler): void;\r\n    getTexturePixels(x: number, y: number, width: number, height: number): Uint8Array;\r\n    getPixels(x: number, y: number, width: number, height: number): Uint8Array;\r\n    recoverBitmap(onok?: Function): void;\r\n    disposeBitmap(): void;\r\n    destroy(force?: boolean): void;\r\n}\r\n"
  }
}
