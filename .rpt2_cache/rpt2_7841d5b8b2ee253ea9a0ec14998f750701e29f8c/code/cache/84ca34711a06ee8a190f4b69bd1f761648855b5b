{
  "code": "import { Mesh2D } from \"./Mesh2D\";\r\nimport { LayaGL } from \"../../layagl/LayaGL\";\r\nexport class MeshParticle2D extends Mesh2D {\r\n    constructor(maxNum) {\r\n        super(MeshParticle2D.const_stride, maxNum * 4 * MeshParticle2D.const_stride, 4);\r\n        this.canReuse = true;\r\n        this.setAttributes(MeshParticle2D._fixattriInfo);\r\n        this.createQuadIB(maxNum);\r\n        this._quadNum = maxNum;\r\n    }\r\n    static __init__() {\r\n        var gl = LayaGL.instance;\r\n        MeshParticle2D._fixattriInfo = [gl.FLOAT, 4, 0,\r\n            gl.FLOAT, 3, 16,\r\n            gl.FLOAT, 3, 28,\r\n            gl.FLOAT, 4, 40,\r\n            gl.FLOAT, 4, 56,\r\n            gl.FLOAT, 3, 72,\r\n            gl.FLOAT, 2, 84,\r\n            gl.FLOAT, 4, 92,\r\n            gl.FLOAT, 1, 108,\r\n            gl.FLOAT, 1, 112];\r\n    }\r\n    setMaxParticleNum(maxNum) {\r\n        this._vb._resizeBuffer(maxNum * 4 * MeshParticle2D.const_stride, false);\r\n        this.createQuadIB(maxNum);\r\n    }\r\n    static getAMesh(maxNum) {\r\n        if (MeshParticle2D._POOL.length) {\r\n            var ret = MeshParticle2D._POOL.pop();\r\n            ret.setMaxParticleNum(maxNum);\r\n            return ret;\r\n        }\r\n        return new MeshParticle2D(maxNum);\r\n    }\r\n    releaseMesh() {\r\n        ;\r\n        this._vb.setByteLength(0);\r\n        this.vertNum = 0;\r\n        this.indexNum = 0;\r\n        MeshParticle2D._POOL.push(this);\r\n    }\r\n    destroy() {\r\n        this._ib.destroy();\r\n        this._vb.destroy();\r\n        this._vb.deleteBuffer();\r\n    }\r\n}\r\nMeshParticle2D.const_stride = 116;\r\nMeshParticle2D._POOL = [];\r\n//# sourceMappingURL=MeshParticle2D.js.map",
  "references": [
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/webgl/utils/Mesh2D.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/layagl/LayaGL.ts"
  ],
  "map": "{\"version\":3,\"file\":\"MeshParticle2D.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../libs/laya/webgl/utils/MeshParticle2D.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AAClC,OAAO,EAAE,MAAM,EAAE,MAAM,qBAAqB,CAAC;AAI7C,MAAM,OAAO,cAAe,SAAQ,MAAM;IAoBtC,YAAY,MAAc;QACtB,KAAK,CAAC,cAAc,CAAC,YAAY,EAAE,MAAM,GAAG,CAAC,GAAG,cAAc,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC;QAChF,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,aAAa,CAAC,CAAC;QACjD,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;QAC1B,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC;IAC3B,CAAC;IArBD,MAAM,CAAC,QAAQ;QACX,IAAI,EAAE,GAA0B,MAAM,CAAC,QAAQ,CAAC;QAChD,cAAc,CAAC,aAAa,GAAG,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,EAAE,CAAC;YAC9C,EAAE,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE;YACf,EAAE,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE;YACf,EAAE,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE;YACf,EAAE,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE;YACf,EAAE,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE;YACf,EAAE,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE;YACf,EAAE,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE;YACf,EAAE,CAAC,KAAK,EAAE,CAAC,EAAE,GAAG;YAChB,EAAE,CAAC,KAAK,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;IACtB,CAAC;IAWD,iBAAiB,CAAC,MAAc;QAC5B,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,MAAM,GAAG,CAAC,GAAG,cAAc,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QACxE,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;IAC9B,CAAC;IAMD,MAAM,CAAC,QAAQ,CAAC,MAAc;QAE1B,IAAI,cAAc,CAAC,KAAK,CAAC,MAAM,EAAE;YAC7B,IAAI,GAAG,GAAmB,cAAc,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;YACrD,GAAG,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;YAC9B,OAAO,GAAG,CAAC;SACd;QACD,OAAO,IAAI,cAAc,CAAC,MAAM,CAAC,CAAC;IACtC,CAAC;IAOW,WAAW;QACnB,CAAC;QACD,IAAI,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC;QAC1B,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC;QACjB,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC;QAElB,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACpC,CAAC;IAMW,OAAO;QACf,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;QACnB,IAAI,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC;QACnB,IAAI,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC;IAE5B,CAAC;;AArEM,2BAAY,GAAW,GAAG,CAAC;AAEnB,oBAAK,GAAU,EAAE,CAAC\"}",
  "dts": {
    "name": "D:/widgets/LayaDataStructuresAlgorithms/.rpt2_cache/placeholder/laya/webgl/utils/MeshParticle2D.d.ts",
    "writeByteOrderMark": false,
    "text": "import { Mesh2D } from \"./Mesh2D\";\r\nexport declare class MeshParticle2D extends Mesh2D {\r\n    static const_stride: number;\r\n    private static _fixattriInfo;\r\n    private static _POOL;\r\n    static __init__(): void;\r\n    constructor(maxNum: number);\r\n    setMaxParticleNum(maxNum: number): void;\r\n    static getAMesh(maxNum: number): MeshParticle2D;\r\n    releaseMesh(): void;\r\n    destroy(): void;\r\n}\r\n"
  }
}
