{
  "code": "import { ILaya } from \"../../ILaya\";\r\nimport { LayaGL } from \"../layagl/LayaGL\";\r\nimport { WebGLContext } from \"../webgl/WebGLContext\";\r\nimport { BaseTexture } from \"./BaseTexture\";\r\nimport { TextureFormat } from \"./TextureFormat\";\r\nexport class Texture2D extends BaseTexture {\r\n    constructor(width = 0, height = 0, format = TextureFormat.R8G8B8A8, mipmap = true, canRead = false) {\r\n        super(format, mipmap);\r\n        var gl = LayaGL.instance;\r\n        this._glTextureType = gl.TEXTURE_2D;\r\n        this._width = width;\r\n        this._height = height;\r\n        this._canRead = canRead;\r\n        this._setWarpMode(gl.TEXTURE_WRAP_S, this._wrapModeU);\r\n        this._setWarpMode(gl.TEXTURE_WRAP_T, this._wrapModeV);\r\n        this._setFilterMode(this._filterMode);\r\n        this._setAnisotropy(this._anisoLevel);\r\n        var compress = this._gpuCompressFormat();\r\n        if (mipmap) {\r\n            var mipCount = Math.max(Math.ceil(Math.log2(width)) + 1, Math.ceil(Math.log2(height)) + 1);\r\n            if (!compress) {\r\n                for (var i = 0; i < mipCount; i++)\r\n                    this._setPixels(null, i, Math.max(width >> i, 1), Math.max(height >> i, 1));\r\n            }\r\n            this._mipmapCount = mipCount;\r\n            this._setGPUMemory(width * height * 4 * (1 + 1 / 3));\r\n        }\r\n        else {\r\n            if (!compress)\r\n                this._setPixels(null, 0, width, height);\r\n            this._mipmapCount = 1;\r\n            this._setGPUMemory(width * height * 4);\r\n        }\r\n    }\r\n    static __init__() {\r\n        var pixels = new Uint8Array(3);\r\n        pixels[0] = 128;\r\n        pixels[1] = 128;\r\n        pixels[2] = 128;\r\n        Texture2D.grayTexture = new Texture2D(1, 1, TextureFormat.R8G8B8, false, false);\r\n        Texture2D.grayTexture.setPixels(pixels);\r\n        Texture2D.grayTexture.lock = true;\r\n        pixels[0] = 255;\r\n        pixels[1] = 255;\r\n        pixels[2] = 255;\r\n        Texture2D.whiteTexture = new Texture2D(1, 1, TextureFormat.R8G8B8, false, false);\r\n        Texture2D.whiteTexture.setPixels(pixels);\r\n        Texture2D.whiteTexture.lock = true;\r\n        pixels[0] = 0;\r\n        pixels[1] = 0;\r\n        pixels[2] = 0;\r\n        Texture2D.blackTexture = new Texture2D(1, 1, TextureFormat.R8G8B8, false, false);\r\n        Texture2D.blackTexture.setPixels(pixels);\r\n        Texture2D.blackTexture.lock = true;\r\n    }\r\n    static _parse(data, propertyParams = null, constructParams = null) {\r\n        var texture = constructParams ? new Texture2D(constructParams[0], constructParams[1], constructParams[2], constructParams[3], constructParams[4]) : new Texture2D(0, 0);\r\n        if (propertyParams) {\r\n            texture.wrapModeU = propertyParams.wrapModeU;\r\n            texture.wrapModeV = propertyParams.wrapModeV;\r\n            texture.filterMode = propertyParams.filterMode;\r\n            texture.anisoLevel = propertyParams.anisoLevel;\r\n        }\r\n        switch (texture._format) {\r\n            case TextureFormat.R8G8B8:\r\n            case TextureFormat.R8G8B8A8:\r\n                texture.loadImageSource(data);\r\n                break;\r\n            case TextureFormat.DXT1:\r\n            case TextureFormat.DXT5:\r\n            case TextureFormat.ETC1RGB:\r\n            case TextureFormat.PVRTCRGB_2BPPV:\r\n            case TextureFormat.PVRTCRGBA_2BPPV:\r\n            case TextureFormat.PVRTCRGB_4BPPV:\r\n            case TextureFormat.PVRTCRGBA_4BPPV:\r\n                texture.setCompressData(data);\r\n                break;\r\n            default:\r\n                throw \"Texture2D:unkonwn format.\";\r\n        }\r\n        return texture;\r\n    }\r\n    static load(url, complete) {\r\n        ILaya.loader.create(url, complete, null, ILaya.Loader.TEXTURE2D);\r\n    }\r\n    get defaulteTexture() {\r\n        return Texture2D.grayTexture;\r\n    }\r\n    _gpuCompressFormat() {\r\n        return this._format == TextureFormat.DXT1 || this._format == TextureFormat.DXT5 ||\r\n            this._format == TextureFormat.ETC1RGB ||\r\n            this._format == TextureFormat.PVRTCRGB_2BPPV || this._format == TextureFormat.PVRTCRGBA_2BPPV ||\r\n            this._format == TextureFormat.PVRTCRGB_4BPPV || this._format == TextureFormat.PVRTCRGBA_4BPPV;\r\n    }\r\n    _setPixels(pixels, miplevel, width, height) {\r\n        var gl = LayaGL.instance;\r\n        var textureType = this._glTextureType;\r\n        var glFormat = this._getGLFormat();\r\n        WebGLContext.bindTexture(gl, textureType, this._glTexture);\r\n        switch (this.format) {\r\n            case TextureFormat.R8G8B8:\r\n                gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n                gl.texImage2D(textureType, miplevel, glFormat, width, height, 0, glFormat, gl.UNSIGNED_BYTE, pixels);\r\n                gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\r\n                break;\r\n            case TextureFormat.R5G6B5:\r\n                gl.pixelStorei(gl.UNPACK_ALIGNMENT, 2);\r\n                gl.texImage2D(textureType, miplevel, glFormat, width, height, 0, glFormat, gl.UNSIGNED_SHORT_5_6_5, pixels);\r\n                gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\r\n                break;\r\n            case TextureFormat.R32G32B32A32:\r\n                if (LayaGL.layaGPUInstance._isWebGL2)\r\n                    gl.texImage2D(textureType, miplevel, gl.RGBA32F, width, height, 0, glFormat, gl.FLOAT, pixels);\r\n                else\r\n                    gl.texImage2D(textureType, miplevel, gl.RGBA, width, height, 0, glFormat, gl.FLOAT, pixels);\r\n                break;\r\n            default:\r\n                gl.texImage2D(textureType, miplevel, glFormat, width, height, 0, glFormat, gl.UNSIGNED_BYTE, pixels);\r\n        }\r\n    }\r\n    _calcualatesCompressedDataSize(format, width, height) {\r\n        switch (format) {\r\n            case TextureFormat.DXT1:\r\n            case TextureFormat.ETC1RGB:\r\n                return ((width + 3) >> 2) * ((height + 3) >> 2) * 8;\r\n            case TextureFormat.DXT5:\r\n                return ((width + 3) >> 2) * ((height + 3) >> 2) * 16;\r\n            case TextureFormat.PVRTCRGB_4BPPV:\r\n            case TextureFormat.PVRTCRGBA_4BPPV:\r\n                return Math.floor((Math.max(width, 8) * Math.max(height, 8) * 4 + 7) / 8);\r\n            case TextureFormat.PVRTCRGB_2BPPV:\r\n            case TextureFormat.PVRTCRGBA_2BPPV:\r\n                return Math.floor((Math.max(width, 16) * Math.max(height, 8) * 2 + 7) / 8);\r\n            default:\r\n                return 0;\r\n        }\r\n    }\r\n    _pharseDDS(arrayBuffer) {\r\n        const FOURCC_DXT1 = 827611204;\r\n        const FOURCC_DXT5 = 894720068;\r\n        const DDPF_FOURCC = 0x4;\r\n        const DDSD_MIPMAPCOUNT = 0x20000;\r\n        const DDS_MAGIC = 0x20534444;\r\n        const DDS_HEADER_LENGTH = 31;\r\n        const DDS_HEADER_MAGIC = 0;\r\n        const DDS_HEADER_SIZE = 1;\r\n        const DDS_HEADER_FLAGS = 2;\r\n        const DDS_HEADER_HEIGHT = 3;\r\n        const DDS_HEADER_WIDTH = 4;\r\n        const DDS_HEADER_MIPMAPCOUNT = 7;\r\n        const DDS_HEADER_PF_FLAGS = 20;\r\n        const DDS_HEADER_PF_FOURCC = 21;\r\n        var header = new Int32Array(arrayBuffer, 0, DDS_HEADER_LENGTH);\r\n        if (header[DDS_HEADER_MAGIC] != DDS_MAGIC)\r\n            throw \"Invalid magic number in DDS header\";\r\n        if (!(header[DDS_HEADER_PF_FLAGS] & DDPF_FOURCC))\r\n            throw \"Unsupported format, must contain a FourCC code\";\r\n        var compressedFormat = header[DDS_HEADER_PF_FOURCC];\r\n        switch (this._format) {\r\n            case TextureFormat.DXT1:\r\n                if (compressedFormat !== FOURCC_DXT1)\r\n                    throw \"the FourCC code is not same with texture format.\";\r\n                break;\r\n            case TextureFormat.DXT5:\r\n                if (compressedFormat !== FOURCC_DXT5)\r\n                    throw \"the FourCC code is not same with texture format.\";\r\n                break;\r\n            default:\r\n                throw \"unknown texture format.\";\r\n        }\r\n        var mipLevels = 1;\r\n        if (header[DDS_HEADER_FLAGS] & DDSD_MIPMAPCOUNT) {\r\n            mipLevels = Math.max(1, header[DDS_HEADER_MIPMAPCOUNT]);\r\n            if (!this._mipmap)\r\n                throw \"the mipmap is not same with Texture2D.\";\r\n        }\r\n        else {\r\n            if (this._mipmap)\r\n                throw \"the mipmap is not same with Texture2D.\";\r\n        }\r\n        var width = header[DDS_HEADER_WIDTH];\r\n        var height = header[DDS_HEADER_HEIGHT];\r\n        this._width = width;\r\n        this._height = height;\r\n        var dataOffset = header[DDS_HEADER_SIZE] + 4;\r\n        this._upLoadCompressedTexImage2D(arrayBuffer, width, height, mipLevels, dataOffset, 0);\r\n    }\r\n    _pharseKTX(arrayBuffer) {\r\n        const ETC_HEADER_LENGTH = 13;\r\n        const ETC_HEADER_FORMAT = 4;\r\n        const ETC_HEADER_HEIGHT = 7;\r\n        const ETC_HEADER_WIDTH = 6;\r\n        const ETC_HEADER_MIPMAPCOUNT = 11;\r\n        const ETC_HEADER_METADATA = 12;\r\n        var id = new Uint8Array(arrayBuffer, 0, 12);\r\n        if (id[0] != 0xAB || id[1] != 0x4B || id[2] != 0x54 || id[3] != 0x58 || id[4] != 0x20 || id[5] != 0x31 || id[6] != 0x31 || id[7] != 0xBB || id[8] != 0x0D || id[9] != 0x0A || id[10] != 0x1A || id[11] != 0x0A)\r\n            throw (\"Invalid fileIdentifier in KTX header\");\r\n        var header = new Int32Array(id.buffer, id.length, ETC_HEADER_LENGTH);\r\n        var compressedFormat = header[ETC_HEADER_FORMAT];\r\n        switch (compressedFormat) {\r\n            case LayaGL.layaGPUInstance._compressedTextureEtc1.COMPRESSED_RGB_ETC1_WEBGL:\r\n                this._format = TextureFormat.ETC1RGB;\r\n                break;\r\n            default:\r\n                throw \"unknown texture format.\";\r\n        }\r\n        var mipLevels = header[ETC_HEADER_MIPMAPCOUNT];\r\n        var width = header[ETC_HEADER_WIDTH];\r\n        var height = header[ETC_HEADER_HEIGHT];\r\n        this._width = width;\r\n        this._height = height;\r\n        var dataOffset = 64 + header[ETC_HEADER_METADATA];\r\n        this._upLoadCompressedTexImage2D(arrayBuffer, width, height, mipLevels, dataOffset, 4);\r\n    }\r\n    _pharsePVR(arrayBuffer) {\r\n        const PVR_FORMAT_2BPP_RGB = 0;\r\n        const PVR_FORMAT_2BPP_RGBA = 1;\r\n        const PVR_FORMAT_4BPP_RGB = 2;\r\n        const PVR_FORMAT_4BPP_RGBA = 3;\r\n        const PVR_MAGIC = 0x03525650;\r\n        const PVR_HEADER_LENGTH = 13;\r\n        const PVR_HEADER_MAGIC = 0;\r\n        const PVR_HEADER_FORMAT = 2;\r\n        const PVR_HEADER_HEIGHT = 6;\r\n        const PVR_HEADER_WIDTH = 7;\r\n        const PVR_HEADER_MIPMAPCOUNT = 11;\r\n        const PVR_HEADER_METADATA = 12;\r\n        var header = new Int32Array(arrayBuffer, 0, PVR_HEADER_LENGTH);\r\n        if (header[PVR_HEADER_MAGIC] != PVR_MAGIC)\r\n            throw (\"Invalid magic number in PVR header\");\r\n        var compressedFormat = header[PVR_HEADER_FORMAT];\r\n        switch (compressedFormat) {\r\n            case PVR_FORMAT_2BPP_RGB:\r\n                this._format = TextureFormat.PVRTCRGB_2BPPV;\r\n                break;\r\n            case PVR_FORMAT_4BPP_RGB:\r\n                this._format = TextureFormat.PVRTCRGB_4BPPV;\r\n                break;\r\n            case PVR_FORMAT_2BPP_RGBA:\r\n                this._format = TextureFormat.PVRTCRGBA_2BPPV;\r\n                break;\r\n            case PVR_FORMAT_4BPP_RGBA:\r\n                this._format = TextureFormat.PVRTCRGBA_4BPPV;\r\n                break;\r\n            default:\r\n                throw \"Texture2D:unknown PVR format.\";\r\n        }\r\n        var mipLevels = header[PVR_HEADER_MIPMAPCOUNT];\r\n        var width = header[PVR_HEADER_WIDTH];\r\n        var height = header[PVR_HEADER_HEIGHT];\r\n        this._width = width;\r\n        this._height = height;\r\n        var dataOffset = header[PVR_HEADER_METADATA] + 52;\r\n        this._upLoadCompressedTexImage2D(arrayBuffer, width, height, mipLevels, dataOffset, 0);\r\n    }\r\n    _upLoadCompressedTexImage2D(data, width, height, miplevelCount, dataOffset, imageSizeOffset) {\r\n        var gl = LayaGL.instance;\r\n        var textureType = this._glTextureType;\r\n        WebGLContext.bindTexture(gl, textureType, this._glTexture);\r\n        var glFormat = this._getGLFormat();\r\n        var offset = dataOffset;\r\n        for (var i = 0; i < miplevelCount; i++) {\r\n            offset += imageSizeOffset;\r\n            var mipDataSize = this._calcualatesCompressedDataSize(this._format, width, height);\r\n            var mipData = new Uint8Array(data, offset, mipDataSize);\r\n            gl.compressedTexImage2D(textureType, i, glFormat, width, height, 0, mipData);\r\n            width = Math.max(width >> 1, 1.0);\r\n            height = Math.max(height >> 1, 1.0);\r\n            offset += mipDataSize;\r\n        }\r\n        var memory = offset;\r\n        this._setGPUMemory(memory);\r\n        this._readyed = true;\r\n        this._activeResource();\r\n    }\r\n    loadImageSource(source, premultiplyAlpha = false) {\r\n        var gl = LayaGL.instance;\r\n        var width = source.width;\r\n        var height = source.height;\r\n        this._width = width;\r\n        this._height = height;\r\n        if (!(this._isPot(width) && this._isPot(height)))\r\n            this._mipmap = false;\r\n        this._setWarpMode(gl.TEXTURE_WRAP_S, this._wrapModeU);\r\n        this._setWarpMode(gl.TEXTURE_WRAP_T, this._wrapModeV);\r\n        this._setFilterMode(this._filterMode);\r\n        WebGLContext.bindTexture(gl, this._glTextureType, this._glTexture);\r\n        var glFormat = this._getGLFormat();\r\n        if (ILaya.Render.isConchApp) {\r\n            if (source.setPremultiplyAlpha) {\r\n                source.setPremultiplyAlpha(premultiplyAlpha);\r\n            }\r\n            gl.texImage2D(this._glTextureType, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, source);\r\n        }\r\n        else {\r\n            (premultiplyAlpha) && (gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, true));\r\n            if (this.format == TextureFormat.R5G6B5)\r\n                gl.texImage2D(this._glTextureType, 0, gl.RGB, gl.RGB, gl.UNSIGNED_SHORT_5_6_5, source);\r\n            else\r\n                gl.texImage2D(this._glTextureType, 0, glFormat, glFormat, gl.UNSIGNED_BYTE, source);\r\n            (premultiplyAlpha) && (gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false));\r\n        }\r\n        if (this._mipmap) {\r\n            gl.generateMipmap(this._glTextureType);\r\n            this._setGPUMemory(width * height * 4 * (1 + 1 / 3));\r\n        }\r\n        else {\r\n            this._setGPUMemory(width * height * 4);\r\n        }\r\n        if (this._canRead) {\r\n            if (ILaya.Render.isConchApp) {\r\n                this._pixels = new Uint8Array(source._nativeObj.getImageData(0, 0, width, height));\r\n            }\r\n            else {\r\n                ILaya.Browser.canvas.size(width, height);\r\n                ILaya.Browser.canvas.clear();\r\n                ILaya.Browser.context.drawImage(source, 0, 0, width, height);\r\n                this._pixels = new Uint8Array(ILaya.Browser.context.getImageData(0, 0, width, height).data.buffer);\r\n            }\r\n        }\r\n        this._readyed = true;\r\n        this._activeResource();\r\n    }\r\n    setPixels(pixels, miplevel = 0) {\r\n        if (this._gpuCompressFormat())\r\n            throw \"Texture2D:the format is GPU compression format.\";\r\n        if (!pixels)\r\n            throw \"Texture2D:pixels can't be null.\";\r\n        var width = Math.max(this._width >> miplevel, 1);\r\n        var height = Math.max(this._height >> miplevel, 1);\r\n        var pixelsCount = width * height * this._getFormatByteCount();\r\n        if (pixels.length < pixelsCount)\r\n            throw \"Texture2D:pixels length should at least \" + pixelsCount + \".\";\r\n        this._setPixels(pixels, miplevel, width, height);\r\n        if (this._canRead)\r\n            this._pixels = pixels;\r\n        this._readyed = true;\r\n        this._activeResource();\r\n    }\r\n    setSubPixels(x, y, width, height, pixels, miplevel = 0) {\r\n        if (this._gpuCompressFormat())\r\n            throw \"Texture2D:the format is GPU compression format.\";\r\n        if (!pixels)\r\n            throw \"Texture2D:pixels can't be null.\";\r\n        var gl = LayaGL.instance;\r\n        var textureType = this._glTextureType;\r\n        WebGLContext.bindTexture(gl, textureType, this._glTexture);\r\n        var glFormat = this._getGLFormat();\r\n        switch (this.format) {\r\n            case TextureFormat.R8G8B8:\r\n                gl.pixelStorei(gl.UNPACK_ALIGNMENT, 1);\r\n                gl.texSubImage2D(textureType, miplevel, x, y, width, height, glFormat, gl.UNSIGNED_BYTE, pixels);\r\n                gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\r\n                break;\r\n            case TextureFormat.R5G6B5:\r\n                gl.pixelStorei(gl.UNPACK_ALIGNMENT, 2);\r\n                gl.texSubImage2D(textureType, miplevel, x, y, width, height, glFormat, gl.UNSIGNED_SHORT_5_6_5, pixels);\r\n                gl.pixelStorei(gl.UNPACK_ALIGNMENT, 4);\r\n                break;\r\n            case TextureFormat.R32G32B32A32:\r\n                gl.texSubImage2D(textureType, miplevel, x, y, width, height, glFormat, gl.FLOAT, pixels);\r\n                break;\r\n            default:\r\n                gl.texSubImage2D(textureType, miplevel, x, y, width, height, glFormat, gl.UNSIGNED_BYTE, pixels);\r\n        }\r\n        this._readyed = true;\r\n        this._activeResource();\r\n    }\r\n    setCompressData(data) {\r\n        switch (this._format) {\r\n            case TextureFormat.DXT1:\r\n            case TextureFormat.DXT5:\r\n                this._pharseDDS(data);\r\n                break;\r\n            case TextureFormat.ETC1RGB:\r\n                this._pharseKTX(data);\r\n                break;\r\n            case TextureFormat.PVRTCRGB_2BPPV:\r\n            case TextureFormat.PVRTCRGBA_2BPPV:\r\n            case TextureFormat.PVRTCRGB_4BPPV:\r\n            case TextureFormat.PVRTCRGBA_4BPPV:\r\n                this._pharsePVR(data);\r\n                break;\r\n            default:\r\n                throw \"Texture2D:unkonwn format.\";\r\n        }\r\n    }\r\n    getPixels() {\r\n        if (this._canRead)\r\n            return this._pixels;\r\n        else\r\n            throw new Error(\"Texture2D: must set texture canRead is true.\");\r\n    }\r\n}\r\nTexture2D.TEXTURE2D = \"TEXTURE2D\";\r\nTexture2D.grayTexture = null;\r\nTexture2D.whiteTexture = null;\r\nTexture2D.blackTexture = null;\r\n//# sourceMappingURL=Texture2D.js.map",
  "references": [
    "D:/widgets/LayaDataStructuresAlgorithms/libs/ILaya.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/layagl/LayaGL.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/utils/Handler.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/webgl/WebGLContext.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/resource/BaseTexture.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/resource/TextureFormat.ts"
  ],
  "map": "{\"version\":3,\"file\":\"Texture2D.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../libs/laya/resource/Texture2D.ts\"],\"names\":[],\"mappings\":\"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\"}",
  "dts": {
    "name": "D:/widgets/LayaDataStructuresAlgorithms/.rpt2_cache/placeholder/laya/resource/Texture2D.d.ts",
    "writeByteOrderMark": false,
    "text": "import { Handler } from \"../utils/Handler\";\r\nimport { BaseTexture } from \"./BaseTexture\";\r\nimport { TextureFormat } from \"./TextureFormat\";\r\nexport declare class Texture2D extends BaseTexture {\r\n    static TEXTURE2D: string;\r\n    static grayTexture: Texture2D;\r\n    static whiteTexture: Texture2D;\r\n    static blackTexture: Texture2D;\r\n    static __init__(): void;\r\n    static _parse(data: any, propertyParams?: any, constructParams?: any[]): Texture2D;\r\n    static load(url: string, complete: Handler): void;\r\n    private _canRead;\r\n    private _pixels;\r\n    readonly defaulteTexture: BaseTexture;\r\n    constructor(width?: number, height?: number, format?: TextureFormat, mipmap?: boolean, canRead?: boolean);\r\n    private _gpuCompressFormat;\r\n    private _setPixels;\r\n    private _calcualatesCompressedDataSize;\r\n    private _pharseDDS;\r\n    private _pharseKTX;\r\n    private _pharsePVR;\r\n    _upLoadCompressedTexImage2D(data: ArrayBuffer, width: number, height: number, miplevelCount: number, dataOffset: number, imageSizeOffset: number): void;\r\n    loadImageSource(source: any, premultiplyAlpha?: boolean): void;\r\n    setPixels(pixels: Uint8Array | Uint16Array | Float32Array, miplevel?: number): void;\r\n    setSubPixels(x: number, y: number, width: number, height: number, pixels: Uint8Array | Uint16Array | Float32Array, miplevel?: number): void;\r\n    setCompressData(data: ArrayBuffer): void;\r\n    getPixels(): Uint8Array | Uint16Array | Float32Array;\r\n}\r\n"
  }
}
