{
  "code": "import { Bitmap } from \"./Bitmap\";\r\nimport { Texture } from \"./Texture\";\r\nimport { Texture2D } from \"./Texture2D\";\r\nimport { ILaya } from \"../../ILaya\";\r\nimport { Browser } from \"../utils/Browser\";\r\nexport class HTMLCanvas extends Bitmap {\r\n    constructor(createCanvas = false) {\r\n        super();\r\n        if (createCanvas)\r\n            this._source = Browser.createElement(\"canvas\");\r\n        else {\r\n            this._source = this;\r\n        }\r\n        this.lock = true;\r\n    }\r\n    get source() {\r\n        return this._source;\r\n    }\r\n    _getSource() {\r\n        return this._source;\r\n    }\r\n    clear() {\r\n        if (this._ctx) {\r\n            if (this._ctx.clear) {\r\n                this._ctx.clear();\r\n            }\r\n            else {\r\n                this._ctx.clearRect(0, 0, this._width, this._height);\r\n            }\r\n        }\r\n        if (this._texture) {\r\n            this._texture.destroy();\r\n            this._texture = null;\r\n        }\r\n    }\r\n    destroy() {\r\n        super.destroy();\r\n        this._setCPUMemory(0);\r\n        this._ctx && this._ctx.destroy && this._ctx.destroy();\r\n        this._ctx = null;\r\n    }\r\n    release() {\r\n    }\r\n    get context() {\r\n        if (this._ctx)\r\n            return this._ctx;\r\n        if (this._source == this) {\r\n            this._ctx = new ILaya.Context();\r\n        }\r\n        else {\r\n            this._ctx = this._source.getContext(ILaya.Render.isConchApp ? 'layagl' : '2d');\r\n        }\r\n        this._ctx._canvas = this;\r\n        return this._ctx;\r\n    }\r\n    _setContext(context) {\r\n        this._ctx = context;\r\n    }\r\n    getContext(contextID, other = null) {\r\n        return this.context;\r\n    }\r\n    getMemSize() {\r\n        return 0;\r\n    }\r\n    size(w, h) {\r\n        if (this._width != w || this._height != h || (this._source && (this._source.width != w || this._source.height != h))) {\r\n            this._width = w;\r\n            this._height = h;\r\n            this._setCPUMemory(w * h * 4);\r\n            this._ctx && this._ctx.size && this._ctx.size(w, h);\r\n            if (this._source) {\r\n                this._source.height = h;\r\n                this._source.width = w;\r\n            }\r\n            if (this._texture) {\r\n                this._texture.destroy();\r\n                this._texture = null;\r\n            }\r\n        }\r\n    }\r\n    getTexture() {\r\n        if (!this._texture) {\r\n            var bitmap = new Texture2D();\r\n            bitmap.loadImageSource(this.source);\r\n            this._texture = new Texture(bitmap);\r\n        }\r\n        return this._texture;\r\n    }\r\n    toBase64(type, encoderOptions) {\r\n        if (this._source) {\r\n            if (ILaya.Render.isConchApp) {\r\n                var win = window;\r\n                if (win.conchConfig.threadMode == 2) {\r\n                    throw \"native 2 thread mode use toBase64Async\";\r\n                }\r\n                var width = this._ctx._targets.sourceWidth;\r\n                var height = this._ctx._targets.sourceHeight;\r\n                var data = this._ctx._targets.getData(0, 0, width, height);\r\n                return win.conchToBase64FlipY ? win.conchToBase64FlipY(type, encoderOptions, data.buffer, width, height) : win.conchToBase64(type, encoderOptions, data.buffer, width, height);\r\n            }\r\n            else {\r\n                return this._source.toDataURL(type, encoderOptions);\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n    toBase64Async(type, encoderOptions, callBack) {\r\n        var width = this._ctx._targets.sourceWidth;\r\n        var height = this._ctx._targets.sourceHeight;\r\n        this._ctx._targets.getDataAsync(0, 0, width, height, function (data) {\r\n            let win = window;\r\n            var base64 = win.conchToBase64FlipY ? win.conchToBase64FlipY(type, encoderOptions, data.buffer, width, height) : win.conchToBase64(type, encoderOptions, data.buffer, width, height);\r\n            callBack(base64);\r\n        });\r\n    }\r\n}\r\n//# sourceMappingURL=HTMLCanvas.js.map",
  "references": [
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/resource/Bitmap.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/resource/Texture.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/resource/Texture2D.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/resource/Context.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/ILaya.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/utils/Browser.ts"
  ],
  "map": "{\"version\":3,\"file\":\"HTMLCanvas.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../libs/laya/resource/HTMLCanvas.ts\"],\"names\":[],\"mappings\":\"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\"}",
  "dts": {
    "name": "D:/widgets/LayaDataStructuresAlgorithms/.rpt2_cache/placeholder/laya/resource/HTMLCanvas.d.ts",
    "writeByteOrderMark": false,
    "text": "import { Bitmap } from \"./Bitmap\";\r\nimport { Texture } from \"./Texture\";\r\nimport { Context } from \"./Context\";\r\nexport declare class HTMLCanvas extends Bitmap {\r\n    private _ctx;\r\n    _source: HTMLCanvasElement;\r\n    _texture: Texture;\r\n    readonly source: HTMLCanvasElement;\r\n    _getSource(): HTMLCanvasElement;\r\n    constructor(createCanvas?: boolean);\r\n    clear(): void;\r\n    destroy(): void;\r\n    release(): void;\r\n    readonly context: Context;\r\n    _setContext(context: Context): void;\r\n    getContext(contextID: string, other?: any): Context;\r\n    getMemSize(): number;\r\n    size(w: number, h: number): void;\r\n    getTexture(): Texture;\r\n    toBase64(type: string, encoderOptions: number): string;\r\n    toBase64Async(type: string, encoderOptions: number, callBack: Function): void;\r\n}\r\n"
  }
}
