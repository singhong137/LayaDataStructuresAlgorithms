{
  "code": "import { ILaya } from \"../../ILaya\";\r\nimport { Event } from \"../events/Event\";\r\nimport { Browser } from \"../utils/Browser\";\r\nimport { HttpRequest } from \"./HttpRequest\";\r\nimport { Loader } from \"./Loader\";\r\nexport class TTFLoader {\r\n    load(fontPath) {\r\n        this._url = fontPath;\r\n        var tArr = fontPath.split(\".ttf\")[0].split(\"/\");\r\n        this.fontName = tArr[tArr.length - 1];\r\n        if (ILaya.Render.isConchApp) {\r\n            this._loadConch();\r\n        }\r\n        else if (window.FontFace) {\r\n            this._loadWithFontFace();\r\n        }\r\n        else {\r\n            this._loadWithCSS();\r\n        }\r\n    }\r\n    _loadConch() {\r\n        this._http = new HttpRequest();\r\n        this._http.on(Event.ERROR, this, this._onErr);\r\n        this._http.on(Event.COMPLETE, this, this._onHttpLoaded);\r\n        this._http.send(this._url, null, \"get\", Loader.BUFFER);\r\n    }\r\n    _onHttpLoaded(data = null) {\r\n        window[\"conchTextCanvas\"].setFontFaceFromBuffer(this.fontName, data);\r\n        this._clearHttp();\r\n        this._complete();\r\n    }\r\n    _clearHttp() {\r\n        if (this._http) {\r\n            this._http.off(Event.ERROR, this, this._onErr);\r\n            this._http.off(Event.COMPLETE, this, this._onHttpLoaded);\r\n            this._http = null;\r\n        }\r\n    }\r\n    _onErr() {\r\n        this._clearHttp();\r\n        if (this.err) {\r\n            this.err.runWith(\"fail:\" + this._url);\r\n            this.err = null;\r\n        }\r\n    }\r\n    _complete() {\r\n        ILaya.systemTimer.clear(this, this._complete);\r\n        ILaya.systemTimer.clear(this, this._checkComplete);\r\n        if (this._div && this._div.parentNode) {\r\n            this._div.parentNode.removeChild(this._div);\r\n            this._div = null;\r\n        }\r\n        if (this.complete) {\r\n            this.complete.runWith(this);\r\n            this.complete = null;\r\n        }\r\n    }\r\n    _checkComplete() {\r\n        if (ILaya.Browser.measureText(TTFLoader._testString, this._fontTxt).width != this._txtWidth) {\r\n            this._complete();\r\n        }\r\n    }\r\n    _loadWithFontFace() {\r\n        var fontFace = new window.FontFace(this.fontName, \"url('\" + this._url + \"')\");\r\n        document.fonts.add(fontFace);\r\n        var self = this;\r\n        fontFace.loaded.then((function () {\r\n            self._complete();\r\n        }));\r\n        fontFace.load();\r\n    }\r\n    _createDiv() {\r\n        this._div = Browser.createElement(\"div\");\r\n        this._div.innerHTML = \"laya\";\r\n        var _style = this._div.style;\r\n        _style.fontFamily = this.fontName;\r\n        _style.position = \"absolute\";\r\n        _style.left = \"-100px\";\r\n        _style.top = \"-100px\";\r\n        document.body.appendChild(this._div);\r\n    }\r\n    _loadWithCSS() {\r\n        var fontStyle = Browser.createElement(\"style\");\r\n        fontStyle.type = \"text/css\";\r\n        document.body.appendChild(fontStyle);\r\n        fontStyle.textContent = \"@font-face { font-family:'\" + this.fontName + \"'; src:url('\" + this._url + \"');}\";\r\n        this._fontTxt = \"40px \" + this.fontName;\r\n        this._txtWidth = Browser.measureText(TTFLoader._testString, this._fontTxt).width;\r\n        var self = this;\r\n        fontStyle.onload = function () {\r\n            ILaya.systemTimer.once(10000, self, this._complete);\r\n        };\r\n        ILaya.systemTimer.loop(20, this, this._checkComplete);\r\n        this._createDiv();\r\n    }\r\n}\r\nTTFLoader._testString = \"LayaTTFFont\";\r\n//# sourceMappingURL=TTFLoader.js.map",
  "references": [
    "D:/widgets/LayaDataStructuresAlgorithms/libs/ILaya.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/events/Event.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/utils/Browser.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/utils/Handler.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/net/HttpRequest.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/net/Loader.ts"
  ],
  "map": "{\"version\":3,\"file\":\"TTFLoader.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../libs/laya/net/TTFLoader.ts\"],\"names\":[],\"mappings\":\"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\"}",
  "dts": {
    "name": "D:/widgets/LayaDataStructuresAlgorithms/.rpt2_cache/placeholder/laya/net/TTFLoader.d.ts",
    "writeByteOrderMark": false,
    "text": "import { Handler } from \"../utils/Handler\";\r\nexport declare class TTFLoader {\r\n    private static _testString;\r\n    fontName: string;\r\n    complete: Handler | null;\r\n    err: Handler | null;\r\n    private _fontTxt;\r\n    private _url;\r\n    private _div;\r\n    private _txtWidth;\r\n    private _http;\r\n    load(fontPath: string): void;\r\n    private _loadConch;\r\n    private _onHttpLoaded;\r\n    private _clearHttp;\r\n    private _onErr;\r\n    private _complete;\r\n    private _checkComplete;\r\n    private _loadWithFontFace;\r\n    private _createDiv;\r\n    private _loadWithCSS;\r\n}\r\n"
  }
}
