{
  "code": "import { LayaGL } from \"../layagl/LayaGL\";\r\nimport { WebGLContext } from \"../webgl/WebGLContext\";\r\nimport { Bitmap } from \"./Bitmap\";\r\nimport { FilterMode } from \"./FilterMode\";\r\nimport { TextureFormat } from \"./TextureFormat\";\r\nimport { WarpMode } from \"./WrapMode\";\r\nexport class BaseTexture extends Bitmap {\r\n    constructor(format, mipMap) {\r\n        super();\r\n        this._wrapModeU = WarpMode.Repeat;\r\n        this._wrapModeV = WarpMode.Repeat;\r\n        this._filterMode = FilterMode.Bilinear;\r\n        this._readyed = false;\r\n        this._width = -1;\r\n        this._height = -1;\r\n        this._format = format;\r\n        this._mipmap = mipMap;\r\n        this._anisoLevel = 1;\r\n        this._glTexture = LayaGL.instance.createTexture();\r\n    }\r\n    get mipmap() {\r\n        return this._mipmap;\r\n    }\r\n    get format() {\r\n        return this._format;\r\n    }\r\n    get wrapModeU() {\r\n        return this._wrapModeU;\r\n    }\r\n    set wrapModeU(value) {\r\n        if (this._wrapModeU !== value) {\r\n            this._wrapModeU = value;\r\n            (this._width !== -1) && (this._setWarpMode(LayaGL.instance.TEXTURE_WRAP_S, value));\r\n        }\r\n    }\r\n    get wrapModeV() {\r\n        return this._wrapModeV;\r\n    }\r\n    set wrapModeV(value) {\r\n        if (this._wrapModeV !== value) {\r\n            this._wrapModeV = value;\r\n            (this._height !== -1) && (this._setWarpMode(LayaGL.instance.TEXTURE_WRAP_T, value));\r\n        }\r\n    }\r\n    get filterMode() {\r\n        return this._filterMode;\r\n    }\r\n    set filterMode(value) {\r\n        if (value !== this._filterMode) {\r\n            this._filterMode = value;\r\n            ((this._width !== -1) && (this._height !== -1)) && (this._setFilterMode(value));\r\n        }\r\n    }\r\n    get anisoLevel() {\r\n        return this._anisoLevel;\r\n    }\r\n    set anisoLevel(value) {\r\n        if (value !== this._anisoLevel) {\r\n            this._anisoLevel = Math.max(1, Math.min(16, value));\r\n            ((this._width !== -1) && (this._height !== -1)) && (this._setAnisotropy(value));\r\n        }\r\n    }\r\n    get mipmapCount() {\r\n        return this._mipmapCount;\r\n    }\r\n    get defaulteTexture() {\r\n        throw \"BaseTexture:must override it.\";\r\n    }\r\n    _getFormatByteCount() {\r\n        switch (this._format) {\r\n            case TextureFormat.R8G8B8:\r\n                return 3;\r\n            case TextureFormat.R8G8B8A8:\r\n                return 4;\r\n            case TextureFormat.R5G6B5:\r\n                return 1;\r\n            case TextureFormat.Alpha8:\r\n                return 1;\r\n            case TextureFormat.R32G32B32A32:\r\n                return 4;\r\n            default:\r\n                throw \"Texture2D: unknown format.\";\r\n        }\r\n    }\r\n    _isPot(size) {\r\n        return (size & (size - 1)) === 0;\r\n    }\r\n    _getGLFormat() {\r\n        var glFormat;\r\n        var gl = LayaGL.instance;\r\n        var gpu = LayaGL.layaGPUInstance;\r\n        switch (this._format) {\r\n            case TextureFormat.R8G8B8:\r\n            case TextureFormat.R5G6B5:\r\n                glFormat = gl.RGB;\r\n                break;\r\n            case TextureFormat.R8G8B8A8:\r\n                glFormat = gl.RGBA;\r\n                break;\r\n            case TextureFormat.Alpha8:\r\n                glFormat = gl.ALPHA;\r\n                break;\r\n            case TextureFormat.R32G32B32A32:\r\n                glFormat = gl.RGBA;\r\n                break;\r\n            case TextureFormat.DXT1:\r\n                if (gpu._compressedTextureS3tc)\r\n                    glFormat = gpu._compressedTextureS3tc.COMPRESSED_RGB_S3TC_DXT1_EXT;\r\n                else\r\n                    throw \"BaseTexture: not support DXT1 format.\";\r\n                break;\r\n            case TextureFormat.DXT5:\r\n                if (gpu._compressedTextureS3tc)\r\n                    glFormat = gpu._compressedTextureS3tc.COMPRESSED_RGBA_S3TC_DXT5_EXT;\r\n                else\r\n                    throw \"BaseTexture: not support DXT5 format.\";\r\n                break;\r\n            case TextureFormat.ETC1RGB:\r\n                if (gpu._compressedTextureEtc1)\r\n                    glFormat = gpu._compressedTextureEtc1.COMPRESSED_RGB_ETC1_WEBGL;\r\n                else\r\n                    throw \"BaseTexture: not support ETC1RGB format.\";\r\n                break;\r\n            case TextureFormat.PVRTCRGB_2BPPV:\r\n                if (gpu._compressedTexturePvrtc)\r\n                    glFormat = gpu._compressedTexturePvrtc.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;\r\n                else\r\n                    throw \"BaseTexture: not support PVRTCRGB_2BPPV format.\";\r\n                break;\r\n            case TextureFormat.PVRTCRGBA_2BPPV:\r\n                if (gpu._compressedTexturePvrtc)\r\n                    glFormat = gpu._compressedTexturePvrtc.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;\r\n                else\r\n                    throw \"BaseTexture: not support PVRTCRGBA_2BPPV format.\";\r\n                break;\r\n            case TextureFormat.PVRTCRGB_4BPPV:\r\n                if (gpu._compressedTexturePvrtc)\r\n                    glFormat = gpu._compressedTexturePvrtc.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;\r\n                else\r\n                    throw \"BaseTexture: not support PVRTCRGB_4BPPV format.\";\r\n                break;\r\n            case TextureFormat.PVRTCRGBA_4BPPV:\r\n                if (gpu._compressedTexturePvrtc)\r\n                    glFormat = gpu._compressedTexturePvrtc.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;\r\n                else\r\n                    throw \"BaseTexture: not support PVRTCRGBA_4BPPV format.\";\r\n                break;\r\n            default:\r\n                throw \"BaseTexture: unknown texture format.\";\r\n        }\r\n        return glFormat;\r\n    }\r\n    _setFilterMode(value) {\r\n        var gl = LayaGL.instance;\r\n        WebGLContext.bindTexture(gl, this._glTextureType, this._glTexture);\r\n        switch (value) {\r\n            case FilterMode.Point:\r\n                if (this._mipmap)\r\n                    gl.texParameteri(this._glTextureType, gl.TEXTURE_MIN_FILTER, gl.NEAREST_MIPMAP_NEAREST);\r\n                else\r\n                    gl.texParameteri(this._glTextureType, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n                gl.texParameteri(this._glTextureType, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n                break;\r\n            case FilterMode.Bilinear:\r\n                if (this._mipmap)\r\n                    gl.texParameteri(this._glTextureType, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_NEAREST);\r\n                else\r\n                    gl.texParameteri(this._glTextureType, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n                gl.texParameteri(this._glTextureType, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n                break;\r\n            case FilterMode.Trilinear:\r\n                if (this._mipmap)\r\n                    gl.texParameteri(this._glTextureType, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\r\n                else\r\n                    gl.texParameteri(this._glTextureType, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\r\n                gl.texParameteri(this._glTextureType, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\r\n                break;\r\n            default:\r\n                throw new Error(\"BaseTexture:unknown filterMode value.\");\r\n        }\r\n    }\r\n    _setWarpMode(orientation, mode) {\r\n        var gl = LayaGL.instance;\r\n        WebGLContext.bindTexture(gl, this._glTextureType, this._glTexture);\r\n        if (this._isPot(this._width) && this._isPot(this._height)) {\r\n            switch (mode) {\r\n                case WarpMode.Repeat:\r\n                    gl.texParameteri(this._glTextureType, orientation, gl.REPEAT);\r\n                    break;\r\n                case WarpMode.Clamp:\r\n                    gl.texParameteri(this._glTextureType, orientation, gl.CLAMP_TO_EDGE);\r\n                    break;\r\n            }\r\n        }\r\n        else {\r\n            gl.texParameteri(this._glTextureType, orientation, gl.CLAMP_TO_EDGE);\r\n        }\r\n    }\r\n    _setAnisotropy(value) {\r\n        var anisotropic = LayaGL.layaGPUInstance._extTextureFilterAnisotropic;\r\n        if (anisotropic) {\r\n            value = Math.max(value, 1);\r\n            var gl = LayaGL.instance;\r\n            WebGLContext.bindTexture(gl, this._glTextureType, this._glTexture);\r\n            value = Math.min(gl.getParameter(anisotropic.MAX_TEXTURE_MAX_ANISOTROPY_EXT), value);\r\n            gl.texParameterf(this._glTextureType, anisotropic.TEXTURE_MAX_ANISOTROPY_EXT, value);\r\n        }\r\n    }\r\n    _disposeResource() {\r\n        if (this._glTexture) {\r\n            LayaGL.instance.deleteTexture(this._glTexture);\r\n            this._glTexture = null;\r\n            this._setGPUMemory(0);\r\n        }\r\n    }\r\n    _getSource() {\r\n        if (this._readyed)\r\n            return this._glTexture;\r\n        else\r\n            return null;\r\n    }\r\n    generateMipmap() {\r\n        if (this._isPot(this.width) && this._isPot(this.height))\r\n            LayaGL.instance.generateMipmap(this._glTextureType);\r\n    }\r\n}\r\nBaseTexture._rgbmRange = 5.0;\r\nBaseTexture.FORMAT_R8G8B8 = 0;\r\nBaseTexture.FORMAT_R8G8B8A8 = 1;\r\nBaseTexture.FORMAT_ALPHA8 = 2;\r\nBaseTexture.FORMAT_DXT1 = 3;\r\nBaseTexture.FORMAT_DXT5 = 4;\r\nBaseTexture.FORMAT_ETC1RGB = 5;\r\nBaseTexture.FORMAT_PVRTCRGB_2BPPV = 9;\r\nBaseTexture.FORMAT_PVRTCRGBA_2BPPV = 10;\r\nBaseTexture.FORMAT_PVRTCRGB_4BPPV = 11;\r\nBaseTexture.FORMAT_PVRTCRGBA_4BPPV = 12;\r\nBaseTexture.RENDERTEXTURE_FORMAT_RGBA_HALF_FLOAT = 14;\r\nBaseTexture.FORMAT_R32G32B32A32 = 15;\r\nBaseTexture.FORMAT_DEPTH_16 = 0;\r\nBaseTexture.FORMAT_STENCIL_8 = 1;\r\nBaseTexture.FORMAT_DEPTHSTENCIL_16_8 = 2;\r\nBaseTexture.FORMAT_DEPTHSTENCIL_NONE = 3;\r\nBaseTexture.FILTERMODE_POINT = 0;\r\nBaseTexture.FILTERMODE_BILINEAR = 1;\r\nBaseTexture.FILTERMODE_TRILINEAR = 2;\r\nBaseTexture.WARPMODE_REPEAT = 0;\r\nBaseTexture.WARPMODE_CLAMP = 1;\r\n//# sourceMappingURL=BaseTexture.js.map",
  "references": [
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/layagl/LayaGL.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/webgl/WebGLContext.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/resource/Bitmap.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/resource/FilterMode.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/resource/TextureFormat.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/resource/WrapMode.ts"
  ],
  "map": "{\"version\":3,\"file\":\"BaseTexture.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../libs/laya/resource/BaseTexture.ts\"],\"names\":[],\"mappings\":\"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\"}",
  "dts": {
    "name": "D:/widgets/LayaDataStructuresAlgorithms/.rpt2_cache/placeholder/laya/resource/BaseTexture.d.ts",
    "writeByteOrderMark": false,
    "text": "import { Bitmap } from \"./Bitmap\";\r\nimport { FilterMode } from \"./FilterMode\";\r\nimport { WarpMode } from \"./WrapMode\";\r\nexport declare class BaseTexture extends Bitmap {\r\n    static _rgbmRange: number;\r\n    protected _readyed: boolean;\r\n    protected _glTextureType: number;\r\n    protected _glTexture: any;\r\n    protected _format: number;\r\n    protected _mipmap: boolean;\r\n    protected _wrapModeU: WarpMode;\r\n    protected _wrapModeV: WarpMode;\r\n    protected _filterMode: FilterMode;\r\n    protected _anisoLevel: number;\r\n    protected _mipmapCount: number;\r\n    readonly mipmap: boolean;\r\n    readonly format: number;\r\n    wrapModeU: number;\r\n    wrapModeV: number;\r\n    filterMode: FilterMode;\r\n    anisoLevel: number;\r\n    readonly mipmapCount: number;\r\n    readonly defaulteTexture: BaseTexture;\r\n    constructor(format: number, mipMap: boolean);\r\n    _getFormatByteCount(): number;\r\n    protected _isPot(size: number): boolean;\r\n    protected _getGLFormat(): number;\r\n    protected _setFilterMode(value: FilterMode): void;\r\n    protected _setWarpMode(orientation: number, mode: number): void;\r\n    protected _setAnisotropy(value: number): void;\r\n    protected _disposeResource(): void;\r\n    _getSource(): any;\r\n    generateMipmap(): void;\r\n    static FORMAT_R8G8B8: number;\r\n    static FORMAT_R8G8B8A8: number;\r\n    static FORMAT_ALPHA8: number;\r\n    static FORMAT_DXT1: number;\r\n    static FORMAT_DXT5: number;\r\n    static FORMAT_ETC1RGB: number;\r\n    static FORMAT_PVRTCRGB_2BPPV: number;\r\n    static FORMAT_PVRTCRGBA_2BPPV: number;\r\n    static FORMAT_PVRTCRGB_4BPPV: number;\r\n    static FORMAT_PVRTCRGBA_4BPPV: number;\r\n    static RENDERTEXTURE_FORMAT_RGBA_HALF_FLOAT: number;\r\n    static FORMAT_R32G32B32A32: number;\r\n    static FORMAT_DEPTH_16: number;\r\n    static FORMAT_STENCIL_8: number;\r\n    static FORMAT_DEPTHSTENCIL_16_8: number;\r\n    static FORMAT_DEPTHSTENCIL_NONE: number;\r\n    static FILTERMODE_POINT: number;\r\n    static FILTERMODE_BILINEAR: number;\r\n    static FILTERMODE_TRILINEAR: number;\r\n    static WARPMODE_REPEAT: number;\r\n    static WARPMODE_CLAMP: number;\r\n}\r\n"
  }
}
