{
  "code": "import { Graphics } from \"../display/Graphics\";\r\nimport { Texture } from \"../resource/Texture\";\r\nimport { Utils } from \"../utils/Utils\";\r\nimport { ClassUtils } from \"../utils/ClassUtils\";\r\nimport { ILaya } from \"../../ILaya\";\r\nexport class AutoBitmap extends Graphics {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.autoCacheCmd = true;\r\n        this._width = 0;\r\n        this._height = 0;\r\n        this.uv = null;\r\n    }\r\n    destroy() {\r\n        super.destroy();\r\n        this._source = null;\r\n        this._sizeGrid = null;\r\n        this._offset = null;\r\n    }\r\n    get sizeGrid() {\r\n        return this._sizeGrid;\r\n    }\r\n    set sizeGrid(value) {\r\n        this._sizeGrid = value.map((v) => { return +v; });\r\n        this._setChanged();\r\n    }\r\n    get width() {\r\n        if (this._width)\r\n            return this._width;\r\n        if (this._source)\r\n            return this._source.sourceWidth;\r\n        return 0;\r\n    }\r\n    set width(value) {\r\n        if (this._width != value) {\r\n            this._width = value;\r\n            this._setChanged();\r\n        }\r\n    }\r\n    get height() {\r\n        if (this._height)\r\n            return this._height;\r\n        if (this._source)\r\n            return this._source.sourceHeight;\r\n        return 0;\r\n    }\r\n    set height(value) {\r\n        if (this._height != value) {\r\n            this._height = value;\r\n            this._setChanged();\r\n        }\r\n    }\r\n    get source() {\r\n        return this._source;\r\n    }\r\n    set source(value) {\r\n        if (value) {\r\n            this._source = value;\r\n            this._setChanged();\r\n        }\r\n        else {\r\n            this._source = null;\r\n            this.clear();\r\n        }\r\n    }\r\n    _setChanged() {\r\n        if (!this._isChanged) {\r\n            this._isChanged = true;\r\n            ILaya.timer.callLater(this, this.changeSource);\r\n        }\r\n    }\r\n    changeSource() {\r\n        this._isChanged = false;\r\n        var source = this._source;\r\n        if (!source || !source.bitmap)\r\n            return;\r\n        var width = this.width;\r\n        var height = this.height;\r\n        var sizeGrid = this._sizeGrid;\r\n        var sw = source.sourceWidth;\r\n        var sh = source.sourceHeight;\r\n        if (!sizeGrid || (sw === width && sh === height)) {\r\n            this.clear();\r\n            this.drawTexture(source, this._offset ? this._offset[0] : 0, this._offset ? this._offset[1] : 0, width, height, null, 1, null, null, this.uv);\r\n        }\r\n        else {\r\n            this.clear();\r\n            this.draw9Grid(source, 0, 0, width, height, sizeGrid);\r\n            this._repaint();\r\n            return;\r\n        }\r\n        this._repaint();\r\n    }\r\n    drawBitmap(repeat, tex, x, y, width = 0, height = 0) {\r\n        if (width < 0.1 || height < 0.1)\r\n            return;\r\n        if (repeat && (tex.width != width || tex.height != height))\r\n            this.fillTexture(tex, x, y, width, height);\r\n        else\r\n            this.drawImage(tex, x, y, width, height);\r\n    }\r\n    static getTexture(tex, x, y, width, height) {\r\n        if (width <= 0)\r\n            width = 1;\r\n        if (height <= 0)\r\n            height = 1;\r\n        tex.$_GID || (tex.$_GID = Utils.getGID());\r\n        var texture;\r\n        if (!texture || !texture._getSource()) {\r\n            texture = Texture.createFromTexture(tex, x, y, width, height);\r\n        }\r\n        return texture;\r\n    }\r\n}\r\nClassUtils.regClass(\"laya.ui.AutoBitmap\", AutoBitmap);\r\nClassUtils.regClass(\"Laya.AutoBitmap\", AutoBitmap);\r\n//# sourceMappingURL=AutoBitmap.js.map",
  "references": [
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/display/Graphics.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/resource/Texture.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/utils/Utils.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/utils/ClassUtils.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/libs/ILaya.ts"
  ],
  "map": "{\"version\":3,\"file\":\"AutoBitmap.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../libs/laya/ui/AutoBitmap.ts\"],\"names\":[],\"mappings\":\"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\"}",
  "dts": {
    "name": "D:/widgets/LayaDataStructuresAlgorithms/.rpt2_cache/placeholder/laya/ui/AutoBitmap.d.ts",
    "writeByteOrderMark": false,
    "text": "import { Graphics } from \"../display/Graphics\";\r\nimport { Texture } from \"../resource/Texture\";\r\nexport declare class AutoBitmap extends Graphics {\r\n    autoCacheCmd: boolean;\r\n    private _width;\r\n    private _height;\r\n    private _source;\r\n    private _sizeGrid;\r\n    protected _isChanged: boolean;\r\n    _offset: any[];\r\n    uv: number[];\r\n    destroy(): void;\r\n    sizeGrid: number[];\r\n    width: number;\r\n    height: number;\r\n    source: Texture;\r\n    protected _setChanged(): void;\r\n    protected changeSource(): void;\r\n    private drawBitmap;\r\n    private static getTexture;\r\n}\r\n"
  }
}
