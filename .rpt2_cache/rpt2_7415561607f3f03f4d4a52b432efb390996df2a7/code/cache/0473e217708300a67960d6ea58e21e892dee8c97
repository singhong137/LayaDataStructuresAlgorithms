{
  "code": "import { defaultCompare, Compare, swap, reverseCompare } from \"../util\";\r\nexport class MinHeap {\r\n    constructor(compareFn = defaultCompare) {\r\n        this.compareFn = compareFn;\r\n        this.heap = [];\r\n    }\r\n    getLeftIndex(index) {\r\n        return 2 * index + 1;\r\n    }\r\n    getRightIndex(index) {\r\n        return 2 * index + 2;\r\n    }\r\n    getParentIndex(index) {\r\n        if (index === 0)\r\n            return undefined;\r\n        return Math.floor((index - 1) / 2);\r\n    }\r\n    size() {\r\n        return this.heap.length;\r\n    }\r\n    isEmpty() {\r\n        return this.size() <= 0;\r\n    }\r\n    clear() {\r\n        this.heap = [];\r\n    }\r\n    findMinimum() {\r\n        return this.isEmpty() ? undefined : this.heap[0];\r\n    }\r\n    insert(value) {\r\n        if (value != null) {\r\n            const index = this.heap.length;\r\n            this.heap.push(value);\r\n            this.siftUp(index);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    siftDown(index) {\r\n        let element = index;\r\n        const left = this.getLeftIndex(index);\r\n        const right = this.getRightIndex(index);\r\n        const size = this.size();\r\n        if (left < size && this.compareFn(this.heap[element], this.heap[left]) === Compare.BIGGER_THAN)\r\n            element = left;\r\n        if (right < size && this.compareFn(this.heap[element], this.heap[right]) === Compare.BIGGER_THAN)\r\n            element = right;\r\n        if (index !== element) {\r\n            swap(this.heap, index, element);\r\n            this.siftDown(element);\r\n        }\r\n    }\r\n    siftUp(index) {\r\n        let parent = this.getParentIndex(index);\r\n        while (index > 0 && this.compareFn(this.heap[parent], this.heap[index]) === Compare.BIGGER_THAN) {\r\n            swap(this.heap, parent, index);\r\n            index = parent;\r\n            parent = this.getParentIndex(index);\r\n        }\r\n    }\r\n    extract() {\r\n        if (this.isEmpty())\r\n            return undefined;\r\n        if (this.size() === 1)\r\n            return this.heap.shift();\r\n        const removedValue = this.heap[0];\r\n        this.heap[0] = this.heap.pop();\r\n        this.siftDown(0);\r\n        return removedValue;\r\n    }\r\n    heapify1(array) {\r\n        if (array) {\r\n            this.heap = [];\r\n            for (let i = 0; i < array.length; i++) {\r\n                this.heap.push(array[i]);\r\n                this.siftUp(this.heap.length - 1);\r\n            }\r\n        }\r\n        return this.heap;\r\n    }\r\n    heapify(array) {\r\n        if (array)\r\n            this.heap = array;\r\n        const maxIndex = Math.floor(this.size() / 2) - 1;\r\n        for (let i = 0; i < maxIndex; i++)\r\n            this.siftDown(i);\r\n        return this.heap;\r\n    }\r\n    heapSort(array, compareFn = defaultCompare) {\r\n        this.heapify(array);\r\n        let sortedArray = [];\r\n        let l = this.size();\r\n        for (let i = 0; i < l; i++)\r\n            sortedArray.push(this.extract());\r\n        return this.heap = sortedArray;\r\n    }\r\n    getAsArray() {\r\n        return this.heap;\r\n    }\r\n}\r\nexport class MaxHeap extends MinHeap {\r\n    constructor(compareFn = defaultCompare) {\r\n        super(compareFn);\r\n        this.compareFn = compareFn;\r\n        this.compareFn = reverseCompare(compareFn);\r\n    }\r\n}\r\n",
  "references": [
    "D:/widgets/LayaDataStructuresAlgorithms/src/util.ts"
  ]
}
