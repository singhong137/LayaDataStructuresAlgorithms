{
  "code": "import { Script } from \"laya/components/Script\";\r\nexport default class RecursiveTest extends Script {\r\n    constructor() {\r\n        super();\r\n    }\r\n    onEnable() {\r\n        console.log('RecursiveTest---');\r\n        const factorial = (n) => {\r\n            if (n === 1 || n === 0)\r\n                return 1;\r\n            return n * factorial(n - 1);\r\n        };\r\n        console.log('factorial ', factorial(5));\r\n        const fibonacciIterative = (n) => {\r\n            if (n < 1)\r\n                return 0;\r\n            let [fibNMinus2, fibNMinus1, fibN] = [0, 1, n];\r\n            for (let i = 2; i <= n; i++) {\r\n                fibN = fibNMinus1 + fibNMinus2;\r\n                fibNMinus2 = fibNMinus1;\r\n                fibNMinus1 = fibN;\r\n            }\r\n            return fibN;\r\n        };\r\n        console.log('fibonacciIterative ', fibonacciIterative(5));\r\n        const fibonacci = (n) => {\r\n            if (n < 1)\r\n                return 0;\r\n            if (n <= 2)\r\n                return 1;\r\n            return fibonacci(n - 1) + fibonacci(n - 2);\r\n        };\r\n        console.log('fibonacci ', fibonacci(5));\r\n        const fibonacciMemorization = (n) => {\r\n            if (n < 1)\r\n                return 0;\r\n            const memo = [0, 1];\r\n            console.log(memo);\r\n            const fibonacciMem = (num) => {\r\n                if (memo[num] != null)\r\n                    return memo[num];\r\n                console.log('AAA');\r\n                return (memo[num] = fibonacciMem(num - 1) + fibonacciMem(num - 2));\r\n            };\r\n            return fibonacciMem(n);\r\n        };\r\n        console.log('fibonacciMemorization ', fibonacciMemorization(15));\r\n    }\r\n}\r\n",
  "references": [
    "D:/widgets/LayaDataStructuresAlgorithms/libs/laya/components/Script.ts"
  ]
}
