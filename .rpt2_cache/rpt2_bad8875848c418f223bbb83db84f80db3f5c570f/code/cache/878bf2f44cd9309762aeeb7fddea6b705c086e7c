{
  "code": "import { defaultEquals, defaultCompare, Compare } from \"../util\";\r\nimport { Node, DoublyNode } from \"./data_models/Node\";\r\nexport class LinkedList {\r\n    constructor(equalsFn = defaultEquals) {\r\n        this.equalsFn = equalsFn;\r\n        this.count = 0;\r\n    }\r\n    push(element) {\r\n        const node = new Node(element);\r\n        let current;\r\n        if (this.head == null) {\r\n            this.head = node;\r\n        }\r\n        else {\r\n            current = this.head;\r\n            while (current.next != null)\r\n                current = current.next;\r\n            current.next = node;\r\n        }\r\n        this.count++;\r\n    }\r\n    insert(element, index) {\r\n        if (index >= 0 && index <= this.count) {\r\n            const node = new Node(element);\r\n            if (index === 0) {\r\n                const current = this.head;\r\n                node.next = current;\r\n                this.head = node;\r\n            }\r\n            else {\r\n                const previous = this.getElementAt(index - 1);\r\n                node.next = previous.next;\r\n                previous.next = node;\r\n            }\r\n            this.count++;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    getElementAt(index) {\r\n        if (index >= 0 && index <= this.count) {\r\n            let current = this.head;\r\n            for (let i = 0; i < index && current != null; i++)\r\n                current = current.next;\r\n            return current;\r\n        }\r\n        return undefined;\r\n    }\r\n    remove(element) {\r\n        const index = this.indexOf(element);\r\n        return this.removeAt(index);\r\n    }\r\n    indexOf(element) {\r\n        let current = this.head;\r\n        for (let i = 0; i < this.count && current != null; i++) {\r\n            if (this.equalsFn(element, current.element))\r\n                return i;\r\n            current = current.next;\r\n        }\r\n        return -1;\r\n    }\r\n    removeAt(index) {\r\n        if (index >= 0 && index < this.count) {\r\n            let current = this.head;\r\n            if (index === 0) {\r\n                this.head = current.next;\r\n            }\r\n            else {\r\n                const previous = this.getElementAt(index - 1);\r\n                current = previous.next;\r\n                previous.next = current.next;\r\n            }\r\n            this.count--;\r\n            return current.element;\r\n        }\r\n        return undefined;\r\n    }\r\n    isEmpty() {\r\n        return this.size() === 0;\r\n    }\r\n    size() {\r\n        return this.count;\r\n    }\r\n    getHead() {\r\n        return this.head;\r\n    }\r\n    clear() {\r\n        this.head = undefined;\r\n        this.count = 0;\r\n    }\r\n    toString() {\r\n        if (this.head == null)\r\n            return '';\r\n        let objString = `${this.head.element}`;\r\n        let current = this.head.next;\r\n        for (let i = 1; i < this.size() && current != null; i++) {\r\n            objString = `${objString},${current.element}`;\r\n            current = current.next;\r\n        }\r\n        return objString;\r\n    }\r\n}\r\nexport class DoublyLinkedList extends LinkedList {\r\n    constructor(equalsFn = defaultEquals) {\r\n        super(equalsFn);\r\n        this.equalsFn = equalsFn;\r\n    }\r\n    push(element) {\r\n        const node = new DoublyNode(element);\r\n        if (this.head == null) {\r\n            this.head = node;\r\n            this.tail = node;\r\n        }\r\n        else {\r\n            this.tail.next = node;\r\n            node.prev = this.tail;\r\n            this.tail = node;\r\n        }\r\n        this.count++;\r\n    }\r\n    insert(element, index) {\r\n        if (index >= 0 && index <= this.count) {\r\n            const node = new DoublyNode(element);\r\n            let current = this.head;\r\n            if (index == 0) {\r\n                if (this.head == null) {\r\n                    this.head = node;\r\n                    this.tail = node;\r\n                }\r\n                else {\r\n                    node.next = this.head;\r\n                    this.head.prev = node;\r\n                    this.head = node;\r\n                }\r\n            }\r\n            else if (index === this.count) {\r\n                current = this.tail;\r\n                current.next = node;\r\n                node.prev = current;\r\n                this.tail = node;\r\n            }\r\n            else {\r\n                const previous = this.getElementAt(index - 1);\r\n                current = previous.next;\r\n                node.next = current;\r\n                previous.next = node;\r\n                current.prev = node;\r\n                node.prev = previous;\r\n            }\r\n            this.count++;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    removeAt(index) {\r\n        if (index >= 0 && index < this.count) {\r\n            let current = this.head;\r\n            if (index === 0) {\r\n                this.head = this.head.next;\r\n                if (this.count === 1) {\r\n                    this.tail = undefined;\r\n                }\r\n                else {\r\n                    this.head.prev = undefined;\r\n                }\r\n            }\r\n            else if (index === this.count - 1) {\r\n                current = this.tail;\r\n                this.tail = current.prev;\r\n                this.tail.next = undefined;\r\n            }\r\n            else {\r\n                current = this.getElementAt(index);\r\n                const previous = current.prev;\r\n                previous.next = current.next;\r\n                current.next.prev = previous;\r\n            }\r\n            this.count--;\r\n            return current.element;\r\n        }\r\n        return undefined;\r\n    }\r\n    getHead() {\r\n        return this.head;\r\n    }\r\n    getTail() {\r\n        return this.tail;\r\n    }\r\n    clear() {\r\n        super.clear();\r\n        this.tail = undefined;\r\n    }\r\n    inverseToString() {\r\n        if (this.tail == null)\r\n            return '';\r\n        let objString = `${this.tail.element}`;\r\n        let previous = this.tail.prev;\r\n        while (previous != null) {\r\n            objString = `${objString},${previous.element}`;\r\n            previous = previous.prev;\r\n        }\r\n        return objString;\r\n    }\r\n}\r\nexport class CircularLinkedList extends LinkedList {\r\n    constructor(equalsFn = defaultEquals) {\r\n        super(equalsFn);\r\n        this.equalsFn = equalsFn;\r\n    }\r\n    push(element) {\r\n        const node = new Node(element);\r\n        let current;\r\n        if (this.head == null) {\r\n            this.head = node;\r\n        }\r\n        else {\r\n            current = this.getElementAt(this.size() - 1);\r\n            current.next = node;\r\n        }\r\n        node.next = this.head;\r\n        this.count++;\r\n    }\r\n    insert(element, index) {\r\n        if (index >= 0 && index <= this.count) {\r\n            const node = new Node(element);\r\n            let current = this.head;\r\n            if (index === 0) {\r\n                if (this.head == null) {\r\n                    this.head = node;\r\n                    node.next = this.head;\r\n                }\r\n                else {\r\n                    node.next = current;\r\n                    current = this.getElementAt(this.size());\r\n                    this.head = node;\r\n                    current.next = this.head;\r\n                }\r\n            }\r\n            else {\r\n                const previous = this.getElementAt(index - 1);\r\n                node.next = previous.next;\r\n                previous.next = node;\r\n            }\r\n            this.count++;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    removeAt(index) {\r\n        if (index >= 0 && index < this.count) {\r\n            let current = this.head;\r\n            if (index === 0) {\r\n                if (this.size() === 1) {\r\n                    this.head = undefined;\r\n                }\r\n                else {\r\n                    const removed = this.head;\r\n                    current = this.getElementAt(this.size() - 1);\r\n                    this.head = this.head.next;\r\n                    current.next = this.head;\r\n                    current = removed;\r\n                }\r\n            }\r\n            else {\r\n                const previous = this.getElementAt(index - 1);\r\n                current = previous.next;\r\n                previous.next = current.next;\r\n            }\r\n            this.count--;\r\n            return current.element;\r\n        }\r\n        return undefined;\r\n    }\r\n}\r\nexport class SortedLinkedList extends LinkedList {\r\n    constructor(equalsFn = defaultEquals, compareFn = defaultCompare) {\r\n        super(equalsFn);\r\n        this.equalsFn = equalsFn;\r\n        this.compareFn = compareFn;\r\n    }\r\n    push(element) {\r\n        if (this.isEmpty()) {\r\n            super.push(element);\r\n        }\r\n        else {\r\n            const index = this.getIndexNextSortedElement(element);\r\n            super.insert(element, index);\r\n        }\r\n    }\r\n    insert(element, index = 0) {\r\n        if (this.isEmpty())\r\n            return super.insert(element, 0);\r\n        index = this.getIndexNextSortedElement(element);\r\n        return super.insert(element, index);\r\n    }\r\n    getIndexNextSortedElement(element) {\r\n        let current = this.head;\r\n        let i = 0;\r\n        for (; i < this.size() && current; i++) {\r\n            const comp = this.compareFn(element, current.element);\r\n            if (comp === Compare.LESS_THAN)\r\n                return i;\r\n            current = current.next;\r\n        }\r\n        return i;\r\n    }\r\n}\r\nexport class StackLinkedList {\r\n    constructor() {\r\n        this.items = new DoublyLinkedList();\r\n    }\r\n    push(element) {\r\n        this.items.push(element);\r\n    }\r\n    pop() {\r\n        if (this.isEmpty())\r\n            return undefined;\r\n        const result = this.items.removeAt(this.size() - 1);\r\n        return result;\r\n    }\r\n    peek() {\r\n        if (this.isEmpty())\r\n            return undefined;\r\n        return this.items.getElementAt(this.size() - 1).element;\r\n    }\r\n    isEmpty() {\r\n        return this.items.isEmpty();\r\n    }\r\n    size() {\r\n        return this.items.size();\r\n    }\r\n    clear() {\r\n        this.items.clear();\r\n    }\r\n    toString() {\r\n        return this.items.toString();\r\n    }\r\n}\r\n",
  "references": [
    "D:/widgets/LayaDataStructuresAlgorithms/src/util.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/src/data_structures/data_models/Node.ts"
  ]
}
