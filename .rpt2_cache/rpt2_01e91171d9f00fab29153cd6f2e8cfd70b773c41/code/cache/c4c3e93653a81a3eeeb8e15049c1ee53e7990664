{
  "code": "const INF = 9;\r\nconst find = (i, parent) => {\r\n    while (parent[i]) {\r\n        i = parent[i];\r\n    }\r\n    return i;\r\n};\r\nconst union = (i, j, parent) => {\r\n    if (i !== j) {\r\n        parent[j] = i;\r\n        return true;\r\n    }\r\n    return false;\r\n};\r\nconst initializeCost = (graph) => {\r\n    const cost = [];\r\n    const length = graph.length;\r\n    for (let i = 0; i < length; i++) {\r\n        cost[i] = [];\r\n        for (let j = 0; j < length; j++) {\r\n            if (graph[i][j] === 0) {\r\n                cost[i][j] = INF;\r\n            }\r\n            else {\r\n                cost[i][j] = graph[i][j];\r\n            }\r\n        }\r\n    }\r\n    return cost;\r\n};\r\nexport const kruskal = (graph) => {\r\n    const length = graph.length;\r\n    const parent = [];\r\n    let ne = 0;\r\n    let a;\r\n    let b;\r\n    let u;\r\n    let v;\r\n    const cost = initializeCost(graph);\r\n    console.log('1st ', cost);\r\n    while (ne < length - 1) {\r\n        for (let i = 0, min = INF; i < length; i++) {\r\n            for (let j = 0; j < length; j++) {\r\n                if (cost[i][j] < min) {\r\n                    min = cost[i][j];\r\n                    a = u = i;\r\n                    b = v = j;\r\n                }\r\n            }\r\n        }\r\n        u = find(u, parent);\r\n        v = find(v, parent);\r\n        if (union(u, v, parent)) {\r\n            ne++;\r\n        }\r\n        cost[a][b] = cost[b][a] = 8;\r\n        console.log('cost ', cost);\r\n    }\r\n    return parent;\r\n};\r\n",
  "references": []
}
