{
  "code": "import { ValuePair, ValuePairLazy } from \"./data_models/Value-pair\";\r\nimport { default2String } from \"../util\";\r\nimport { LinkedList } from \"./LinkedList\";\r\nexport class HashTable {\r\n    constructor(toStrFn = default2String) {\r\n        this.toStrFn = toStrFn;\r\n        this.table = {};\r\n    }\r\n    loseloseHashCode(key) {\r\n        if (typeof key === 'number')\r\n            return key;\r\n        const tableKey = this.toStrFn(key);\r\n        let hash = 0;\r\n        for (let i = 0; i < tableKey.length; i++)\r\n            hash += tableKey.charCodeAt(i);\r\n        return hash % 37;\r\n    }\r\n    djb2HashCode(key) {\r\n        const tableKey = this.toStrFn(key);\r\n        let hash = 5381;\r\n        for (let i = 0; i < tableKey.length; i++)\r\n            hash = (hash * 33) + tableKey.charCodeAt(i);\r\n        return hash % 1013;\r\n    }\r\n    hashCode(key) {\r\n        return this.loseloseHashCode(key);\r\n    }\r\n    put(key, value) {\r\n        if (key != null && value != null) {\r\n            const position = this.hashCode(key);\r\n            this.table[position] = new ValuePair(key, value);\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    get(key) {\r\n        const valuePai = this.table[this.hashCode(key)];\r\n        return valuePai == null ? undefined : valuePai.value;\r\n    }\r\n    remove(key) {\r\n        const hash = this.hashCode(key);\r\n        const valuePair = this.table[hash];\r\n        if (valuePair != null) {\r\n            delete this.table[hash];\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    getTable() {\r\n        return this.table;\r\n    }\r\n    isEmpty() {\r\n        return this.size() === 0;\r\n    }\r\n    size() {\r\n        return Object.keys(this.table).length;\r\n    }\r\n    clear() {\r\n        this.table = {};\r\n    }\r\n    toString() {\r\n        if (this.isEmpty())\r\n            return '';\r\n        const keys = Object.keys(this.table);\r\n        let objString = `{${keys[0]}=>${this.table[keys[0]].toString()}}`;\r\n        for (let i = 1; i < keys.length; i++)\r\n            objString = `${objString},{${keys[i]}=>${this.table[keys[i]].toString()}}`;\r\n        return objString;\r\n    }\r\n}\r\nexport class HashTableSeparateChaining {\r\n    constructor(toStrFn = default2String) {\r\n        this.toStrFn = toStrFn;\r\n        this.table = {};\r\n    }\r\n    loseloseHashCode(key) {\r\n        if (typeof key === 'number')\r\n            return key;\r\n        const tableKey = this.toStrFn(key);\r\n        let hash = 0;\r\n        for (let i = 0; i < tableKey.length; i++)\r\n            hash += tableKey.charCodeAt(i);\r\n        return hash % 37;\r\n    }\r\n    djb2HashCode(key) {\r\n        const tableKey = this.toStrFn(key);\r\n        let hash = 5381;\r\n        for (let i = 0; i < tableKey.length; i++)\r\n            hash = (hash * 33) + tableKey.charCodeAt(i);\r\n        return hash % 1013;\r\n    }\r\n    hashCode(key) {\r\n        return this.loseloseHashCode(key);\r\n    }\r\n    put(key, value) {\r\n        if (key != null && value != null) {\r\n            const position = this.hashCode(key);\r\n            if (this.table[position] == null)\r\n                this.table[position] = new LinkedList();\r\n            this.table[position].push(new ValuePair(key, value));\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    get(key) {\r\n        const position = this.hashCode(key);\r\n        const linkedList = this.table[position];\r\n        if (linkedList != null && !linkedList.isEmpty()) {\r\n            let current = linkedList.getHead();\r\n            while (current != null) {\r\n                if (current.element.key === key)\r\n                    return current.element.value;\r\n                current = current.next;\r\n            }\r\n        }\r\n        return undefined;\r\n    }\r\n    remove(key) {\r\n        const position = this.hashCode(key);\r\n        const linkedList = this.table[position];\r\n        if (linkedList != null && !linkedList.isEmpty()) {\r\n            let current = linkedList.getHead();\r\n            while (current != null) {\r\n                if (current.element.key === key) {\r\n                    linkedList.remove(current.element);\r\n                    if (linkedList.isEmpty())\r\n                        delete this.table[position];\r\n                    return true;\r\n                }\r\n                current = current.next;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    getTable() {\r\n        return this.table;\r\n    }\r\n    isEmpty() {\r\n        return this.size() === 0;\r\n    }\r\n    size() {\r\n        return Object.keys(this.table).length;\r\n    }\r\n    clear() {\r\n        this.table = {};\r\n    }\r\n    toString() {\r\n        if (this.isEmpty())\r\n            return '';\r\n        const keys = Object.keys(this.table);\r\n        let objString = `{${keys[0]}=>${this.table[keys[0]].toString()}}`;\r\n        for (let i = 1; i < keys.length; i++)\r\n            objString = `${objString},{${keys[i]}=>${this.table[keys[i]].toString()}}`;\r\n        return objString;\r\n    }\r\n}\r\nexport class HashTableLinearProbing {\r\n    constructor(toStrFn = default2String) {\r\n        this.toStrFn = toStrFn;\r\n        this.table = {};\r\n    }\r\n    loseloseHashCode(key) {\r\n        if (typeof key === 'number')\r\n            return key;\r\n        const tableKey = this.toStrFn(key);\r\n        let hash = 0;\r\n        for (let i = 0; i < tableKey.length; i++)\r\n            hash += tableKey.charCodeAt(i);\r\n        return hash % 37;\r\n    }\r\n    djb2HashCode(key) {\r\n        const tableKey = this.toStrFn(key);\r\n        let hash = 5381;\r\n        for (let i = 0; i < tableKey.length; i++)\r\n            hash = (hash * 33) + tableKey.charCodeAt(i);\r\n        return hash % 1013;\r\n    }\r\n    hashCode(key) {\r\n        return this.loseloseHashCode(key);\r\n    }\r\n    put(key, value) {\r\n        if (key != null && value != null) {\r\n            const position = this.hashCode(key);\r\n            if (this.table[position] == null) {\r\n                this.table[position] = new ValuePair(key, value);\r\n            }\r\n            else {\r\n                let index = position + 1;\r\n                while (this.table[index] != null)\r\n                    index++;\r\n                this.table[index] = new ValuePair(key, value);\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    get(key) {\r\n        const position = this.hashCode(key);\r\n        if (this.table[position] != null) {\r\n            if (this.table[position].key === key)\r\n                return this.table[position].value;\r\n            let index = position + 1;\r\n            while (this.table[index] != null && this.table[index].key !== key)\r\n                index++;\r\n            if (this.table[index] != null && this.table[index].key === key)\r\n                return this.table[position].value;\r\n        }\r\n        return undefined;\r\n    }\r\n    remove(key) {\r\n        const position = this.hashCode(key);\r\n        if (this.table[position] != null) {\r\n            if (this.table[position].key === key) {\r\n                delete this.table[position];\r\n                this.verifyRemoveSideEffect(key, position);\r\n                return true;\r\n            }\r\n            let index = position + 1;\r\n            while (this.table[index] != null && this.table[index].key !== key)\r\n                index++;\r\n            if (this.table[index] != null && this.table[index].key === key) {\r\n                delete this.table[index];\r\n                this.verifyRemoveSideEffect(key, index);\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    verifyRemoveSideEffect(key, removedPosition) {\r\n        const hash = this.hashCode(key);\r\n        let index = removedPosition + 1;\r\n        while (this.table[index] != null) {\r\n            const posHash = this.hashCode(this.table[index].key);\r\n            if (posHash <= hash || posHash <= removedPosition) {\r\n                this.table[removedPosition] = this.table[index];\r\n                delete this.table[index];\r\n                removedPosition = index;\r\n            }\r\n            index++;\r\n        }\r\n    }\r\n    getTable() {\r\n        return this.table;\r\n    }\r\n    isEmpty() {\r\n        return this.size() === 0;\r\n    }\r\n    size() {\r\n        return Object.keys(this.table).length;\r\n    }\r\n    clear() {\r\n        this.table = {};\r\n    }\r\n    toString() {\r\n        if (this.isEmpty())\r\n            return '';\r\n        const keys = Object.keys(this.table);\r\n        let objString = `{${keys[0]}=>${this.table[keys[0]].toString()}}`;\r\n        for (let i = 1; i < keys.length; i++)\r\n            objString = `${objString},{${keys[i]}=>${this.table[keys[i]].toString()}}`;\r\n        return objString;\r\n    }\r\n}\r\nexport class HashTableLinearProbingLazy {\r\n    constructor(toStrFn = default2String) {\r\n        this.toStrFn = toStrFn;\r\n        this.table = {};\r\n    }\r\n    loseloseHashCode(key) {\r\n        if (typeof key === 'number')\r\n            return key;\r\n        const tableKey = this.toStrFn(key);\r\n        let hash = 0;\r\n        for (let i = 0; i < tableKey.length; i++)\r\n            hash += tableKey.charCodeAt(i);\r\n        return hash % 37;\r\n    }\r\n    djb2HashCode(key) {\r\n        const tableKey = this.toStrFn(key);\r\n        let hash = 5381;\r\n        for (let i = 0; i < tableKey.length; i++)\r\n            hash = (hash * 33) + tableKey.charCodeAt(i);\r\n        return hash % 1013;\r\n    }\r\n    hashCode(key) {\r\n        return this.loseloseHashCode(key);\r\n    }\r\n    put(key, value) {\r\n        if (key != null && value != null) {\r\n            const position = this.hashCode(key);\r\n            if (this.table[position] == null || (this.table[position] != null && this.table[position].isDeleted)) {\r\n                this.table[position] = new ValuePairLazy(key, value);\r\n            }\r\n            else {\r\n                let index = position + 1;\r\n                while (this.table[index] != null && !this.table[position].isDeleted)\r\n                    index++;\r\n                this.table[index] = new ValuePairLazy(key, value);\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    get(key) {\r\n        const position = this.hashCode(key);\r\n        if (this.table[position] != null) {\r\n            if (this.table[position].key === key && !this.table[position].isDeleted)\r\n                return this.table[position].value;\r\n            let index = position + 1;\r\n            while (this.table[index] != null && (this.table[index].key !== key || this.table[index].isDeleted)) {\r\n                if (this.table[index].key === key && this.table[index].isDeleted)\r\n                    return undefined;\r\n                index++;\r\n            }\r\n            if (this.table[index] != null && this.table[index].key === key && !this.table[index].isDeleted)\r\n                return this.table[position].value;\r\n        }\r\n        return undefined;\r\n    }\r\n    remove(key) {\r\n        const position = this.hashCode(key);\r\n        if (this.table[position] != null) {\r\n            if (this.table[position].key === key && !this.table[position].isDeleted) {\r\n                this.table[position].isDeleted = true;\r\n                return true;\r\n            }\r\n            let index = position + 1;\r\n            while (this.table[index] != null && (this.table[index].key !== key || this.table[index].isDeleted))\r\n                index++;\r\n            if (this.table[index] != null && this.table[index].key === key && !this.table[index].isDeleted) {\r\n                this.table[index].isDeleted = true;\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    getTable() {\r\n        return this.table;\r\n    }\r\n    isEmpty() {\r\n        return this.size() === 0;\r\n    }\r\n    size() {\r\n        return Object.keys(this.table).length;\r\n    }\r\n    clear() {\r\n        this.table = {};\r\n    }\r\n    toString() {\r\n        if (this.isEmpty())\r\n            return '';\r\n        const keys = Object.keys(this.table);\r\n        let objString = `{${keys[0]}=>${this.table[keys[0]].toString()}}`;\r\n        for (let i = 1; i < keys.length; i++)\r\n            objString = `${objString},{${keys[i]}=>${this.table[keys[i]].toString()}}`;\r\n        return objString;\r\n    }\r\n}\r\n",
  "references": [
    "D:/widgets/LayaDataStructuresAlgorithms/src/data_structures/data_models/Value-pair.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/src/util.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/src/data_structures/LinkedList.ts"
  ]
}
