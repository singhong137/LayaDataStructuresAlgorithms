{
  "code": "import { TreeNode, RedBlackNode, Colors } from \"./data_models/Node\";\r\nimport { defaultCompare, Compare } from \"../util\";\r\nexport class BinarySearchTree {\r\n    constructor(compareFn = defaultCompare) {\r\n        this.compareFn = compareFn;\r\n    }\r\n    insert(key) {\r\n        if (this.root == null) {\r\n            this.root = new TreeNode(key);\r\n        }\r\n        else {\r\n            this.insertNode(this.root, key);\r\n        }\r\n    }\r\n    insertNode(node, key) {\r\n        if (this.compareFn(key, node.key) === Compare.LESS_THAN) {\r\n            if (node.left == null) {\r\n                node.left = new TreeNode(key);\r\n            }\r\n            else {\r\n                this.insertNode(node.left, key);\r\n            }\r\n        }\r\n        else if (node.right == null) {\r\n            node.right = new TreeNode(key);\r\n        }\r\n        else {\r\n            this.insertNode(node.right, key);\r\n        }\r\n    }\r\n    getRoot() {\r\n        return this.root;\r\n    }\r\n    search(key) {\r\n        return this.searchNode(this.root, key);\r\n    }\r\n    searchNode(node, key) {\r\n        if (node == null)\r\n            return false;\r\n        if (this.compareFn(key, node.key) === Compare.LESS_THAN) {\r\n            return this.searchNode(node.left, key);\r\n        }\r\n        else if (this.compareFn(key, node.key) === Compare.BIGGER_THAN) {\r\n            return this.searchNode(node.right, key);\r\n        }\r\n        return true;\r\n    }\r\n    inOrderTraverse(callback) {\r\n        this.inOrderTraverseNode(this.root, callback);\r\n    }\r\n    inOrderTraverseNode(node, callback) {\r\n        if (node != null) {\r\n            this.inOrderTraverseNode(node.left, callback);\r\n            callback(node.key);\r\n            this.inOrderTraverseNode(node.right, callback);\r\n        }\r\n    }\r\n    preOrderTraverse(callback) {\r\n        this.preOrderTraverseNode(this.root, callback);\r\n    }\r\n    preOrderTraverseNode(node, callback) {\r\n        if (node != null) {\r\n            callback(node.key);\r\n            this.preOrderTraverseNode(node.left, callback);\r\n            this.preOrderTraverseNode(node.right, callback);\r\n        }\r\n    }\r\n    postOrderTraverse(callback) {\r\n        this.postOrderTraverseNode(this.root, callback);\r\n    }\r\n    postOrderTraverseNode(node, callback) {\r\n        if (node != null) {\r\n            this.postOrderTraverseNode(node.left, callback);\r\n            this.postOrderTraverseNode(node.right, callback);\r\n            callback(node.key);\r\n        }\r\n    }\r\n    min() {\r\n        return this.minNode(this.root);\r\n    }\r\n    minNode(node) {\r\n        let current = node;\r\n        while (current != null && current.left != null)\r\n            current = current.left;\r\n        return current;\r\n    }\r\n    max() {\r\n        return this.maxNode(this.root);\r\n    }\r\n    maxNode(node) {\r\n        let current = node;\r\n        while (current != null && current.right != null)\r\n            current = current.right;\r\n        return current;\r\n    }\r\n    remove(key) {\r\n        return this.root = this.removeNode(this.root, key);\r\n    }\r\n    removeNode(node, key) {\r\n        if (node == null)\r\n            return null;\r\n        if (this.compareFn(key, node.key) === Compare.LESS_THAN) {\r\n            node.left = this.removeNode(node.left, key);\r\n            return node;\r\n        }\r\n        else if (this.compareFn(key, node.key) === Compare.BIGGER_THAN) {\r\n            node.right = this.removeNode(node.right, key);\r\n            return node;\r\n        }\r\n        else {\r\n            if (node.left == null && node.right == null) {\r\n                node = null;\r\n                return node;\r\n            }\r\n            if (node.left == null) {\r\n                node = node.right;\r\n                return node;\r\n            }\r\n            else if (node.right == null) {\r\n                node = node.left;\r\n                return node;\r\n            }\r\n            const aux = this.minNode(node.right);\r\n            node.key = aux.key;\r\n            node.right = this.removeNode(node.right, aux.key);\r\n            return node;\r\n        }\r\n    }\r\n}\r\nvar BalanceFactor;\r\n(function (BalanceFactor) {\r\n    BalanceFactor[BalanceFactor[\"UNBALANCED_RIGHT\"] = 1] = \"UNBALANCED_RIGHT\";\r\n    BalanceFactor[BalanceFactor[\"SLIGHTLY_UNBALANCED_RIGHT\"] = 2] = \"SLIGHTLY_UNBALANCED_RIGHT\";\r\n    BalanceFactor[BalanceFactor[\"BALANCED\"] = 3] = \"BALANCED\";\r\n    BalanceFactor[BalanceFactor[\"SLIGHTLY_UNBALANCED_LEFT\"] = 4] = \"SLIGHTLY_UNBALANCED_LEFT\";\r\n    BalanceFactor[BalanceFactor[\"UNBALANCED_LEFT\"] = 5] = \"UNBALANCED_LEFT\";\r\n})(BalanceFactor || (BalanceFactor = {}));\r\nexport class AVLTree extends BinarySearchTree {\r\n    constructor(compareFn = defaultCompare) {\r\n        super(compareFn);\r\n        this.compareFn = compareFn;\r\n    }\r\n    getNodeHeight(node) {\r\n        if (node == null)\r\n            return -1;\r\n        return Math.max(this.getNodeHeight(node.left), this.getNodeHeight(node.right)) + 1;\r\n    }\r\n    rotationLL(node) {\r\n        const tmp = node.left;\r\n        node.left = tmp.right;\r\n        tmp.right = node;\r\n        return tmp;\r\n    }\r\n    rotationRR(node) {\r\n        const tmp = node.right;\r\n        node.right = tmp.left;\r\n        tmp.left = node;\r\n        return tmp;\r\n    }\r\n    rotationLR(node) {\r\n        node.left = this.rotationRR(node.left);\r\n        return this.rotationLL(node);\r\n    }\r\n    rotationRL(node) {\r\n        node.right = this.rotationLL(node.right);\r\n        return this.rotationRR(node);\r\n    }\r\n    getBalanceFactor(node) {\r\n        const heightDifference = this.getNodeHeight(node.left) - this.getNodeHeight(node.right);\r\n        switch (heightDifference) {\r\n            case -2: return BalanceFactor.UNBALANCED_RIGHT;\r\n            case -1: return BalanceFactor.SLIGHTLY_UNBALANCED_RIGHT;\r\n            case 1: return BalanceFactor.SLIGHTLY_UNBALANCED_LEFT;\r\n            case 2: return BalanceFactor.UNBALANCED_LEFT;\r\n            default: return BalanceFactor.BALANCED;\r\n        }\r\n    }\r\n    insert(key) {\r\n        this.root = this.insertNode(this.root, key);\r\n    }\r\n    insertNode(node, key) {\r\n        if (node == null) {\r\n            return new TreeNode(key);\r\n        }\r\n        else if (this.compareFn(key, node.key) === Compare.LESS_THAN) {\r\n            node.left = this.insertNode(node.left, key);\r\n        }\r\n        else if (this.compareFn(key, node.key) == Compare.BIGGER_THAN) {\r\n            node.right = this.insertNode(node.right, key);\r\n        }\r\n        else {\r\n            return node;\r\n        }\r\n        const balanceState = this.getBalanceFactor(node);\r\n        if (balanceState === BalanceFactor.UNBALANCED_LEFT) {\r\n            if (this.compareFn(key, node.left.key) === Compare.LESS_THAN) {\r\n                node = this.rotationLL(node);\r\n            }\r\n            else {\r\n                return this.rotationLR(node);\r\n            }\r\n        }\r\n        if (balanceState === BalanceFactor.UNBALANCED_RIGHT) {\r\n            if (this.compareFn(key, node.right.key) === Compare.BIGGER_THAN) {\r\n                node = this.rotationRR(node);\r\n            }\r\n            else {\r\n                return this.rotationRL(node);\r\n            }\r\n        }\r\n        return node;\r\n    }\r\n    removeNode(node, key) {\r\n        if (node == null)\r\n            return null;\r\n        if (this.compareFn(key, node.key) === Compare.LESS_THAN) {\r\n            node.left = this.removeNode(node.left, key);\r\n        }\r\n        else if (this.compareFn(key, node.key) === Compare.BIGGER_THAN) {\r\n            node.right = this.removeNode(node.right, key);\r\n        }\r\n        else {\r\n            if (node.left == null && node.right == null) {\r\n                node = null;\r\n            }\r\n            else if (node.left == null && node.right != null) {\r\n                node = node.right;\r\n            }\r\n            else if (node.left != null && node.right == null) {\r\n                node = node.left;\r\n            }\r\n            else {\r\n                const inOrderSuccessor = this.minNode(node.right);\r\n                node.key = inOrderSuccessor.key;\r\n                node.right = this.removeNode(node.right, inOrderSuccessor.key);\r\n            }\r\n        }\r\n        if (node == null)\r\n            return node;\r\n        const balanceState = this.getBalanceFactor(node);\r\n        if (balanceState === BalanceFactor.UNBALANCED_LEFT) {\r\n            if (this.getBalanceFactor(node.left) === BalanceFactor.BALANCED || this.getBalanceFactor(node.left) === BalanceFactor.SLIGHTLY_UNBALANCED_LEFT) {\r\n                return this.rotationLL(node);\r\n            }\r\n            if (this.getBalanceFactor(node.left) === BalanceFactor.SLIGHTLY_UNBALANCED_RIGHT) {\r\n                return this.rotationLR(node.left);\r\n            }\r\n        }\r\n        if (balanceState === BalanceFactor.UNBALANCED_RIGHT) {\r\n            if (this.getBalanceFactor(node.right) === BalanceFactor.BALANCED || this.getBalanceFactor(node.right) === BalanceFactor.SLIGHTLY_UNBALANCED_RIGHT) {\r\n                return this.rotationRR(node);\r\n            }\r\n            if (this.getBalanceFactor(node.right) === BalanceFactor.SLIGHTLY_UNBALANCED_LEFT) {\r\n                return this.rotationRL(node.right);\r\n            }\r\n        }\r\n        return node;\r\n    }\r\n}\r\nexport class RedBlackTree extends BinarySearchTree {\r\n    constructor(compareFn = defaultCompare) {\r\n        super();\r\n        this.compareFn = compareFn;\r\n    }\r\n    rotationLL(node) {\r\n        const tmp = node.left;\r\n        node.left = tmp.right;\r\n        if (tmp.right && tmp.right.key)\r\n            tmp.right.parent = node;\r\n        tmp.parent = node.parent;\r\n        if (!node.parent) {\r\n            this.root = tmp;\r\n        }\r\n        else {\r\n            if (node === node.parent.left) {\r\n                node.parent.left = tmp;\r\n            }\r\n            else {\r\n                node.parent.right = tmp;\r\n            }\r\n        }\r\n        tmp.right = node;\r\n        node.parent = tmp;\r\n    }\r\n    rotationRR(node) {\r\n        const tmp = node.right;\r\n        node.right = tmp.left;\r\n        if (tmp.left && tmp.left.key)\r\n            tmp.left.parent = node;\r\n        tmp.parent = node.parent;\r\n        if (!node.parent) {\r\n            this.root = tmp;\r\n        }\r\n        else {\r\n            if (node === node.parent.left) {\r\n                node.parent.left = tmp;\r\n            }\r\n            else {\r\n                node.parent.right = tmp;\r\n            }\r\n        }\r\n        tmp.left = node;\r\n        node.parent = tmp;\r\n    }\r\n    insert(key) {\r\n        if (this.root == null) {\r\n            this.root = new RedBlackNode(key);\r\n            this.root.color = Colors.BLACK;\r\n        }\r\n        else {\r\n            const newNode = this.insertNode(this.root, key);\r\n            this.fixTreeProperties(newNode);\r\n        }\r\n    }\r\n    insertNode(node, key) {\r\n        if (this.compareFn(key, node.key) === Compare.LESS_THAN) {\r\n            if (node.left == null) {\r\n                node.left = new RedBlackNode(key);\r\n                node.left.parent = node;\r\n                return node.left;\r\n            }\r\n            else {\r\n                return this.insertNode(node.left, key);\r\n            }\r\n        }\r\n        else if (node.right == null) {\r\n            node.right = new RedBlackNode(key);\r\n            node.right.parent = node;\r\n            return node.right;\r\n        }\r\n        else {\r\n            return this.insertNode(node.right, key);\r\n        }\r\n    }\r\n    fixTreeProperties(node) {\r\n        while (node && node.parent && node.parent.color === Colors.RED && node.color !== Colors.BLACK) {\r\n            let parent = node.parent;\r\n            const grandParent = parent.parent;\r\n            if (grandParent && grandParent.left === parent) {\r\n                const uncle = grandParent.right;\r\n                if (uncle && uncle.color === Colors.RED) {\r\n                    grandParent.color = Colors.RED;\r\n                    uncle.color = Colors.BLACK;\r\n                    node = grandParent;\r\n                }\r\n                else {\r\n                    if (node === parent.right) {\r\n                        this.rotationRR(parent);\r\n                        node = parent;\r\n                        parent = node.parent;\r\n                    }\r\n                    this.rotationLL(grandParent);\r\n                    parent.color = Colors.BLACK;\r\n                    grandParent.color = Colors.RED;\r\n                    node = parent;\r\n                }\r\n            }\r\n            else {\r\n                const uncle = grandParent.left;\r\n                if (uncle && uncle.color === Colors.RED) {\r\n                    grandParent.color = Colors.RED;\r\n                    parent.color = Colors.BLACK;\r\n                    uncle.color = Colors.BLACK;\r\n                    node = grandParent;\r\n                }\r\n                else {\r\n                    if (node === parent.left) {\r\n                        this.rotationLL(parent);\r\n                        node = parent;\r\n                        parent = node.parent;\r\n                    }\r\n                    this.rotationRR(grandParent);\r\n                    parent.color = Colors.BLACK;\r\n                    grandParent.color = Colors.RED;\r\n                    node = parent;\r\n                }\r\n            }\r\n        }\r\n        this.root.color = Colors.BLACK;\r\n    }\r\n    getRoot() {\r\n        return this.root;\r\n    }\r\n}\r\n//# sourceMappingURL=Tree.js.map",
  "references": [
    "D:/widgets/LayaDataStructuresAlgorithms/src/data_structures/data_models/Node.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/src/util.ts"
  ],
  "map": "{\"version\":3,\"file\":\"Tree.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../src/data_structures/Tree.ts\"],\"names\":[],\"mappings\":\"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\"}"
}
