{
  "code": "const INF = Number.MAX_SAFE_INTEGER;\r\nconst minDistance = (dist, visited) => {\r\n    let min = INF;\r\n    let minIndex = -1;\r\n    for (let v = 0; v < dist.length; v++) {\r\n        if (visited[v] === false && dist[v] <= min) {\r\n            min = dist[v];\r\n            minIndex = v;\r\n        }\r\n    }\r\n    return minIndex;\r\n};\r\nexport function dijkstra(graph, src) {\r\n    const dist = [];\r\n    const visited = [];\r\n    const length = graph.length;\r\n    for (let i = 0; i < length; i++) {\r\n        dist[i] = INF;\r\n        visited[i] = false;\r\n    }\r\n    dist[src] = 0;\r\n    for (let i = 0; i < length - 1; i++) {\r\n        const u = minDistance(dist, visited);\r\n        visited[u] = true;\r\n        for (let v = 0; v < length; v++) {\r\n            if (!visited[v] && graph[u][v] != 0 && dist[u] !== INF && dist[u] + graph[u][v] < dist[v]) {\r\n                dist[v] = dist[u] + graph[u][v];\r\n            }\r\n        }\r\n    }\r\n    return dist;\r\n}\r\nexport function dijkstraWithPath(graph, src) {\r\n    let paths = graph.slice(0);\r\n    const dist = [];\r\n    const visited = [];\r\n    const length = graph.length;\r\n    for (let i = 0; i < length; i++) {\r\n        dist[i] = INF;\r\n        visited[i] = false;\r\n        paths[i] = graph[i].slice(0);\r\n        paths[i].fill(0);\r\n    }\r\n    dist[src] = 0;\r\n    for (let i = 0; i < length - 1; i++) {\r\n        const u = minDistance(dist, visited);\r\n        visited[u] = true;\r\n        for (let v = 0; v < length; v++) {\r\n            if (!visited[v] && graph[u][v] != 0 && dist[u] !== INF && dist[u] + graph[u][v] < dist[v]) {\r\n                dist[v] = dist[u] + graph[u][v];\r\n                paths[v] = paths[u].slice(0);\r\n                paths[v][v] = paths[u][u] + 1;\r\n            }\r\n        }\r\n    }\r\n    return paths;\r\n}\r\n",
  "references": []
}
