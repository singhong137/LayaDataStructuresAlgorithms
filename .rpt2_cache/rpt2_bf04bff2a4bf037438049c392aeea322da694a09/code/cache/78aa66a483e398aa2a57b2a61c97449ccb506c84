{
  "code": "import { defaultCompare, Compare } from \"../util\";\r\nexport class Queue {\r\n    constructor() {\r\n        this.count = 0;\r\n        this.lowestCount = 0;\r\n        this.items = {};\r\n    }\r\n    enqueue(element) {\r\n        this.items[this.count] = element;\r\n        this.count++;\r\n    }\r\n    dequeue() {\r\n        if (this.isEmpty())\r\n            return undefined;\r\n        const result = this.items[this.lowestCount];\r\n        delete this.items[this.lowestCount];\r\n        this.lowestCount++;\r\n        return result;\r\n    }\r\n    peek() {\r\n        if (this.isEmpty())\r\n            return undefined;\r\n        return this.items[this.lowestCount];\r\n    }\r\n    isEmpty() {\r\n        return this.size() === 0;\r\n    }\r\n    size() {\r\n        return this.count - this.lowestCount;\r\n    }\r\n    clear() {\r\n        this.items = {};\r\n        this.count = 0;\r\n        this.lowestCount = 0;\r\n    }\r\n    toString() {\r\n        if (this.isEmpty())\r\n            return '';\r\n        let objString = `${this.items[this.lowestCount]}`;\r\n        for (let i = this.lowestCount + 1; i < this.count; i++)\r\n            objString = `${objString},${this.items[i]}`;\r\n        return objString;\r\n    }\r\n}\r\nexport class Deque extends Queue {\r\n    constructor() {\r\n        super();\r\n    }\r\n    addFront(element) {\r\n        if (super.isEmpty()) {\r\n            this.addBack(element);\r\n        }\r\n        else if (this.lowestCount > 0) {\r\n            this.lowestCount--;\r\n            this.items[this.lowestCount] = element;\r\n        }\r\n        else {\r\n            for (let i = this.count; i > 0; i--)\r\n                this.items[i] = this.items[i - 1];\r\n            this.count++;\r\n            this.lowestCount = 0;\r\n            this.items[0] = element;\r\n        }\r\n    }\r\n    addBack(element) {\r\n        super.enqueue(element);\r\n    }\r\n    removeFront() {\r\n        return super.dequeue();\r\n    }\r\n    removeBack() {\r\n        if (super.isEmpty())\r\n            return undefined;\r\n        this.count--;\r\n        const result = this.items[this.count];\r\n        delete this.items[this.count];\r\n        return result;\r\n    }\r\n    peekFront() {\r\n        return super.peek();\r\n    }\r\n    peekBack() {\r\n        if (super.isEmpty())\r\n            return undefined;\r\n        return this.items[this.count - 1];\r\n    }\r\n}\r\nexport class PriorityQueue {\r\n    constructor(compareFn = defaultCompare, compare = Compare.LESS_THAN) {\r\n        this.compareFn = compareFn;\r\n        this.compare = compare;\r\n        this.items = [];\r\n    }\r\n    enqueue(element) {\r\n        let added = false;\r\n        for (let i = 0; i < this.items.length; i++) {\r\n            if (this.compareFn(element, this.items[i]) === this.compare) {\r\n                this.items.splice(i, 0, element);\r\n                added = true;\r\n                break;\r\n            }\r\n        }\r\n        if (!added)\r\n            this.items.push(element);\r\n    }\r\n    dequeue() {\r\n        return this.items.shift();\r\n    }\r\n    peek() {\r\n        if (this.isEmpty())\r\n            return undefined;\r\n        return this.items[0];\r\n    }\r\n    isEmpty() {\r\n        return this.items.length === 0;\r\n    }\r\n    clear() {\r\n        this.items = [];\r\n    }\r\n    size() {\r\n        return this.items.length;\r\n    }\r\n    toString() {\r\n        if (this.isEmpty())\r\n            return '';\r\n        return this.items.toString();\r\n    }\r\n}\r\n",
  "references": [
    "D:/widgets/LayaDataStructuresAlgorithms/src/util.ts"
  ]
}
