{
  "code": "export function floydWarshall(graph) {\r\n    const dist = [];\r\n    const length = graph.length;\r\n    for (let i = 0; i < length; i++) {\r\n        dist[i] = [];\r\n        for (let j = 0; j < length; j++) {\r\n            if (i === j) {\r\n                dist[i][j] = 0;\r\n            }\r\n            else if (!isFinite(graph[i][j])) {\r\n                dist[i][j] = Infinity;\r\n            }\r\n            else {\r\n                dist[i][j] = graph[i][j];\r\n            }\r\n        }\r\n    }\r\n    for (let k = 0; k < length; k++) {\r\n        for (let i = 0; i < length; i++) {\r\n            for (let j = 0; j < length; j++) {\r\n                if (dist[i][k] + dist[k][j] < dist[i][j]) {\r\n                    dist[i][j] = dist[i][k] + dist[k][j];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return dist;\r\n}\r\nexport function floydWarshallWithPath(graph) {\r\n    const dist = [];\r\n    const length = graph.length;\r\n    const paths = graph.slice(0);\r\n    for (let i = 0; i < length; i++) {\r\n        dist[i] = [];\r\n        paths[i] = graph[i].slice(0);\r\n        paths[i].fill(0);\r\n        for (let j = 0; j < length; j++) {\r\n            paths[i][j] = j;\r\n            if (i === j) {\r\n                dist[i][j] = 0;\r\n                paths[i][j] = Infinity;\r\n            }\r\n            else if (!isFinite(graph[i][j])) {\r\n                dist[i][j] = Infinity;\r\n            }\r\n            else {\r\n                dist[i][j] = graph[i][j];\r\n            }\r\n        }\r\n    }\r\n    console.log('--- ', paths);\r\n    for (let k = 0; k < length; k++) {\r\n        for (let i = 0; i < length; i++) {\r\n            for (let j = 0; j < length; j++) {\r\n                if (dist[i][k] + dist[k][j] < dist[i][j]) {\r\n                    dist[i][j] = dist[i][k] + dist[k][j];\r\n                    paths[i][j] = paths[i][k];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return paths;\r\n}\r\n",
  "references": []
}
