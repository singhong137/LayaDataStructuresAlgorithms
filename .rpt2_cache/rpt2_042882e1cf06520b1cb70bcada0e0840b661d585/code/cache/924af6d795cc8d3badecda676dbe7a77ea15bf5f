{
  "code": "import { Colors } from \"../util\";\r\nconst initializeColor = (vertices) => {\r\n    const color = {};\r\n    for (let i = 0; i < vertices.length; i++)\r\n        color[vertices[i]] = Colors.WHITE;\r\n    return color;\r\n};\r\nconst depthFirstSearchVisit = (u, color, adjList, callback) => {\r\n    color[u] = Colors.GRAY;\r\n    if (callback)\r\n        callback(u);\r\n    const neighbors = adjList.get(u);\r\n    for (let i = 0; i < neighbors.length; i++) {\r\n        const w = neighbors[i];\r\n        if (color[w] === Colors.WHITE)\r\n            depthFirstSearchVisit(w, color, adjList, callback);\r\n    }\r\n    color[u] = Colors.BLACK;\r\n};\r\nexport function depthFirstSearch(graph, callback) {\r\n    const vertices = graph.getVertices();\r\n    const adjList = graph.getAdjList();\r\n    const color = initializeColor(vertices);\r\n    for (let i = 0; i < vertices.length; i++) {\r\n        if (color[vertices[i]] === Colors.WHITE)\r\n            depthFirstSearchVisit(vertices[i], color, adjList, callback);\r\n    }\r\n}\r\n;\r\nconst DFSVisit = (u, color, d, f, p, time, adjList) => {\r\n    color[u] = Colors.GRAY;\r\n    d[u] = ++time['count'];\r\n    const neighbors = adjList.get(u);\r\n    for (let i = 0; i < neighbors.length; i++) {\r\n        const w = neighbors[i];\r\n        if (color[w] === Colors.WHITE) {\r\n            p[w] = u;\r\n            DFSVisit(w, color, d, f, p, time, adjList);\r\n        }\r\n    }\r\n    color[u] = Colors.BLACK;\r\n    f[u] = ++time['count'];\r\n};\r\nexport function DFS(graph) {\r\n    const vertices = graph.getVertices();\r\n    const adjList = graph.getAdjList();\r\n    const color = initializeColor(vertices);\r\n    const d = {};\r\n    const f = {};\r\n    const p = {};\r\n    const time = { count: 0 };\r\n    for (let i = 0; i < vertices.length; i++) {\r\n        f[vertices[i]] = 0;\r\n        d[vertices[i]] = 0;\r\n        p[vertices[i]] = null;\r\n    }\r\n    for (let i = 0; i < vertices.length; i++) {\r\n        if (color[vertices[i]] === Colors.WHITE)\r\n            DFSVisit(vertices[i], color, d, f, p, time, adjList);\r\n    }\r\n    return {\r\n        discovery: d,\r\n        finished: f,\r\n        predecessors: p\r\n    };\r\n}\r\n",
  "references": [
    "D:/widgets/LayaDataStructuresAlgorithms/libs/Laya.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/src/data_structures/Dictionary.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/src/data_structures/Graph.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/src/util.ts"
  ]
}
