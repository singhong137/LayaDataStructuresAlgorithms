{
  "code": "import { Queue } from \"../data_structures/Queue\";\r\nimport { Colors } from \"../util\";\r\nconst initializeColor = (vertices) => {\r\n    const color = {};\r\n    for (let i = 0; i < vertices.length; i++)\r\n        color[vertices[i]] = Colors.WHITE;\r\n    return color;\r\n};\r\nexport function breadthFirstSearch(graph, startVertex, callback) {\r\n    const vertices = graph.getVertices();\r\n    const adjList = graph.getAdjList();\r\n    const color = initializeColor(vertices);\r\n    const queue = new Queue();\r\n    queue.enqueue(startVertex);\r\n    while (!queue.isEmpty()) {\r\n        const u = queue.dequeue();\r\n        const neighbors = adjList.get(u);\r\n        color[u] = Colors.GRAY;\r\n        for (let i = 0; i < neighbors.length; i++) {\r\n            const w = neighbors[i];\r\n            if (color[w] === Colors.WHITE) {\r\n                color[w] = Colors.GRAY;\r\n                queue.enqueue(w);\r\n            }\r\n        }\r\n        color[u] = Colors.BLACK;\r\n        if (callback)\r\n            callback(u);\r\n    }\r\n}\r\n;\r\nexport function BFS(graph, startVertex) {\r\n    const vertices = graph.getVertices();\r\n    const adjList = graph.getAdjList();\r\n    const color = initializeColor(vertices);\r\n    const queue = new Queue();\r\n    const distances = {};\r\n    const predecessors = {};\r\n    queue.enqueue(startVertex);\r\n    for (let i = 0; i < vertices.length; i++) {\r\n        distances[vertices[i]] = 0;\r\n        predecessors[vertices[i]] = null;\r\n    }\r\n    while (!queue.isEmpty()) {\r\n        const u = queue.dequeue();\r\n        const neighbors = adjList.get(u);\r\n        color[u] = Colors.GRAY;\r\n        for (let i = 0; i < neighbors.length; i++) {\r\n            const w = neighbors[i];\r\n            if (color[w] === Colors.WHITE) {\r\n                color[w] = Colors.GRAY;\r\n                distances[w] = distances[u] + 1;\r\n                predecessors[w] = u;\r\n                queue.enqueue(w);\r\n            }\r\n        }\r\n        color[u] = Colors.BLACK;\r\n    }\r\n    return {\r\n        distances: distances,\r\n        predecessors: predecessors\r\n    };\r\n}\r\n",
  "references": [
    "D:/widgets/LayaDataStructuresAlgorithms/src/data_structures/Graph.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/src/data_structures/Queue.ts",
    "D:/widgets/LayaDataStructuresAlgorithms/src/util.ts"
  ]
}
