{
  "code": "export default class Set {\r\n    constructor() {\r\n        this.items = {};\r\n    }\r\n    add(element) {\r\n        if (!this.has(element)) {\r\n            this.items[element] = element;\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    delete(element) {\r\n        if (this.has(element)) {\r\n            delete this.items[element];\r\n            return true;\r\n        }\r\n        return false;\r\n    }\r\n    has(element) {\r\n        return Object.prototype.hasOwnProperty.call(this.items, element);\r\n    }\r\n    size() {\r\n        return Object.keys(this.items).length;\r\n    }\r\n    values() {\r\n        let values = [];\r\n        for (let key in this.items)\r\n            if (this.items.hasOwnProperty(key))\r\n                values.push(key);\r\n        return values;\r\n    }\r\n    union(otherSet) {\r\n        const unionSet = new Set();\r\n        this.values().forEach(value => unionSet.add(value));\r\n        otherSet.values().forEach(value => unionSet.add(value));\r\n        return unionSet;\r\n    }\r\n    intersection(otherSet) {\r\n        const intersectionSet = new Set();\r\n        const values = this.values();\r\n        const otherValues = otherSet.values();\r\n        let biggerSet = values;\r\n        let smallerSet = otherValues;\r\n        if (otherValues.length - values.length > 0) {\r\n            biggerSet = otherValues;\r\n            smallerSet = values;\r\n        }\r\n        smallerSet.forEach(value => {\r\n            if (biggerSet.indexOf(value) != -1)\r\n                intersectionSet.add(value);\r\n        });\r\n        return intersectionSet;\r\n    }\r\n    difference(otherSet) {\r\n        const differenceSet = new Set();\r\n        this.values().forEach(value => {\r\n            if (!otherSet.has(value))\r\n                differenceSet.add(value);\r\n        });\r\n        return differenceSet;\r\n    }\r\n    isSubsetOf(otherSet) {\r\n        if (this.size() > otherSet.size())\r\n            return false;\r\n        let isSubset = true;\r\n        this.values().every(value => {\r\n            if (!otherSet.has(value)) {\r\n                isSubset = false;\r\n                return false;\r\n            }\r\n            return true;\r\n        });\r\n        return isSubset;\r\n    }\r\n}\r\n",
  "references": []
}
