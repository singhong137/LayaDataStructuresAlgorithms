{
  "code": "export function floydWarshall(graph) {\r\n    const dist = [];\r\n    const length = graph.length;\r\n    for (let i = 0; i < length; i++) {\r\n        dist[i] = [];\r\n        for (let j = 0; j < length; j++) {\r\n            if (i === j) {\r\n                dist[i][j] = 0;\r\n            }\r\n            else if (!isFinite(graph[i][j])) {\r\n                dist[i][j] = Infinity;\r\n            }\r\n            else {\r\n                dist[i][j] = graph[i][j];\r\n            }\r\n        }\r\n    }\r\n    for (let k = 0; k < length; k++) {\r\n        for (let i = 0; i < length; i++) {\r\n            for (let j = 0; j < length; j++) {\r\n                if (dist[i][k] + dist[k][j] < dist[i][j]) {\r\n                    dist[i][j] = dist[i][k] + dist[k][j];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return dist;\r\n}\r\nexport function floydWarshallWithPath(graph) {\r\n    const dist = [];\r\n    const length = graph.length;\r\n    const paths = graph.slice(0);\r\n    for (let i = 0; i < length; i++) {\r\n        dist[i] = [];\r\n        paths[i] = graph[i].slice(0);\r\n        paths[i].fill(0);\r\n        for (let j = 0; j < length; j++) {\r\n            paths[i][j] = j;\r\n            if (i === j) {\r\n                dist[i][j] = 0;\r\n                paths[i][j] = Infinity;\r\n            }\r\n            else if (!isFinite(graph[i][j])) {\r\n                dist[i][j] = Infinity;\r\n            }\r\n            else {\r\n                dist[i][j] = graph[i][j];\r\n            }\r\n        }\r\n    }\r\n    for (let k = 0; k < length; k++) {\r\n        for (let i = 0; i < length; i++) {\r\n            for (let j = 0; j < length; j++) {\r\n                if (dist[i][k] + dist[k][j] < dist[i][j]) {\r\n                    dist[i][j] = dist[i][k] + dist[k][j];\r\n                    paths[i][j] = paths[i][k];\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return paths;\r\n}\r\n//# sourceMappingURL=Floyd-warshall.js.map",
  "references": [],
  "map": "{\"version\":3,\"file\":\"Floyd-warshall.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/algorithms/graph/Floyd-warshall.ts\"],\"names\":[],\"mappings\":\"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\"}"
}
